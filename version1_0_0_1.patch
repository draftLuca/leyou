Index: ly-common/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-common/pom.xml	(date 1571761656884)
+++ ly-common/pom.xml	(date 1571761656884)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>leyou</artifactId>
+        <groupId>com.leyou.parent</groupId>
+        <version>1.0.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.leyou.common</groupId>
+    <artifactId>ly-common</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.tomcat.embed</groupId>
+            <artifactId>tomcat-embed-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-logging</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.9.6</version>
+        </dependency>
+    </dependencies>
+
+
+</project>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetailExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetailExample.java	(date 1575720882622)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetailExample.java	(date 1575720882622)
@@ -0,0 +1,710 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TbOrderDetailExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbOrderDetailExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andIdIsNull() {
+            addCriterion("id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIsNotNull() {
+            addCriterion("id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdEqualTo(Long value) {
+            addCriterion("id =", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotEqualTo(Long value) {
+            addCriterion("id <>", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThan(Long value) {
+            addCriterion("id >", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("id >=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThan(Long value) {
+            addCriterion("id <", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThanOrEqualTo(Long value) {
+            addCriterion("id <=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIn(List<Long> values) {
+            addCriterion("id in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotIn(List<Long> values) {
+            addCriterion("id not in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdBetween(Long value1, Long value2) {
+            addCriterion("id between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotBetween(Long value1, Long value2) {
+            addCriterion("id not between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdIsNull() {
+            addCriterion("order_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdIsNotNull() {
+            addCriterion("order_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdEqualTo(Long value) {
+            addCriterion("order_id =", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotEqualTo(Long value) {
+            addCriterion("order_id <>", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdGreaterThan(Long value) {
+            addCriterion("order_id >", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("order_id >=", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdLessThan(Long value) {
+            addCriterion("order_id <", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdLessThanOrEqualTo(Long value) {
+            addCriterion("order_id <=", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdIn(List<Long> values) {
+            addCriterion("order_id in", values, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotIn(List<Long> values) {
+            addCriterion("order_id not in", values, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdBetween(Long value1, Long value2) {
+            addCriterion("order_id between", value1, value2, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotBetween(Long value1, Long value2) {
+            addCriterion("order_id not between", value1, value2, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdIsNull() {
+            addCriterion("sku_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdIsNotNull() {
+            addCriterion("sku_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdEqualTo(Long value) {
+            addCriterion("sku_id =", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdNotEqualTo(Long value) {
+            addCriterion("sku_id <>", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdGreaterThan(Long value) {
+            addCriterion("sku_id >", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("sku_id >=", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdLessThan(Long value) {
+            addCriterion("sku_id <", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdLessThanOrEqualTo(Long value) {
+            addCriterion("sku_id <=", value, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdIn(List<Long> values) {
+            addCriterion("sku_id in", values, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdNotIn(List<Long> values) {
+            addCriterion("sku_id not in", values, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdBetween(Long value1, Long value2) {
+            addCriterion("sku_id between", value1, value2, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andSkuIdNotBetween(Long value1, Long value2) {
+            addCriterion("sku_id not between", value1, value2, "skuId");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumIsNull() {
+            addCriterion("num is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumIsNotNull() {
+            addCriterion("num is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumEqualTo(Integer value) {
+            addCriterion("num =", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumNotEqualTo(Integer value) {
+            addCriterion("num <>", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumGreaterThan(Integer value) {
+            addCriterion("num >", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumGreaterThanOrEqualTo(Integer value) {
+            addCriterion("num >=", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumLessThan(Integer value) {
+            addCriterion("num <", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumLessThanOrEqualTo(Integer value) {
+            addCriterion("num <=", value, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumIn(List<Integer> values) {
+            addCriterion("num in", values, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumNotIn(List<Integer> values) {
+            addCriterion("num not in", values, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumBetween(Integer value1, Integer value2) {
+            addCriterion("num between", value1, value2, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andNumNotBetween(Integer value1, Integer value2) {
+            addCriterion("num not between", value1, value2, "num");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleIsNull() {
+            addCriterion("title is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleIsNotNull() {
+            addCriterion("title is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleEqualTo(String value) {
+            addCriterion("title =", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleNotEqualTo(String value) {
+            addCriterion("title <>", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleGreaterThan(String value) {
+            addCriterion("title >", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleGreaterThanOrEqualTo(String value) {
+            addCriterion("title >=", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleLessThan(String value) {
+            addCriterion("title <", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleLessThanOrEqualTo(String value) {
+            addCriterion("title <=", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleLike(String value) {
+            addCriterion("title like", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleNotLike(String value) {
+            addCriterion("title not like", value, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleIn(List<String> values) {
+            addCriterion("title in", values, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleNotIn(List<String> values) {
+            addCriterion("title not in", values, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleBetween(String value1, String value2) {
+            addCriterion("title between", value1, value2, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andTitleNotBetween(String value1, String value2) {
+            addCriterion("title not between", value1, value2, "title");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecIsNull() {
+            addCriterion("own_spec is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecIsNotNull() {
+            addCriterion("own_spec is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecEqualTo(String value) {
+            addCriterion("own_spec =", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecNotEqualTo(String value) {
+            addCriterion("own_spec <>", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecGreaterThan(String value) {
+            addCriterion("own_spec >", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecGreaterThanOrEqualTo(String value) {
+            addCriterion("own_spec >=", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecLessThan(String value) {
+            addCriterion("own_spec <", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecLessThanOrEqualTo(String value) {
+            addCriterion("own_spec <=", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecLike(String value) {
+            addCriterion("own_spec like", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecNotLike(String value) {
+            addCriterion("own_spec not like", value, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecIn(List<String> values) {
+            addCriterion("own_spec in", values, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecNotIn(List<String> values) {
+            addCriterion("own_spec not in", values, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecBetween(String value1, String value2) {
+            addCriterion("own_spec between", value1, value2, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andOwnSpecNotBetween(String value1, String value2) {
+            addCriterion("own_spec not between", value1, value2, "ownSpec");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceIsNull() {
+            addCriterion("price is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceIsNotNull() {
+            addCriterion("price is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceEqualTo(Long value) {
+            addCriterion("price =", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceNotEqualTo(Long value) {
+            addCriterion("price <>", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceGreaterThan(Long value) {
+            addCriterion("price >", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceGreaterThanOrEqualTo(Long value) {
+            addCriterion("price >=", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceLessThan(Long value) {
+            addCriterion("price <", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceLessThanOrEqualTo(Long value) {
+            addCriterion("price <=", value, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceIn(List<Long> values) {
+            addCriterion("price in", values, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceNotIn(List<Long> values) {
+            addCriterion("price not in", values, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceBetween(Long value1, Long value2) {
+            addCriterion("price between", value1, value2, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andPriceNotBetween(Long value1, Long value2) {
+            addCriterion("price not between", value1, value2, "price");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIsNull() {
+            addCriterion("image is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIsNotNull() {
+            addCriterion("image is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageEqualTo(String value) {
+            addCriterion("image =", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotEqualTo(String value) {
+            addCriterion("image <>", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageGreaterThan(String value) {
+            addCriterion("image >", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageGreaterThanOrEqualTo(String value) {
+            addCriterion("image >=", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLessThan(String value) {
+            addCriterion("image <", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLessThanOrEqualTo(String value) {
+            addCriterion("image <=", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLike(String value) {
+            addCriterion("image like", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotLike(String value) {
+            addCriterion("image not like", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIn(List<String> values) {
+            addCriterion("image in", values, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotIn(List<String> values) {
+            addCriterion("image not in", values, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageBetween(String value1, String value2) {
+            addCriterion("image between", value1, value2, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotBetween(String value1, String value2) {
+            addCriterion("image not between", value1, value2, "image");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategory.java	(date 1575720882609)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategory.java	(date 1575720882609)
@@ -0,0 +1,57 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+
+public class TbCategory implements Serializable {
+    private Long id;
+
+    private String name;
+
+    private Long parentId;
+
+    private Boolean isParent;
+
+    private Integer sort;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Long getParentId() {
+        return parentId;
+    }
+
+    public void setParentId(Long parentId) {
+        this.parentId = parentId;
+    }
+
+    public Boolean getIsParent() {
+        return isParent;
+    }
+
+    public void setIsParent(Boolean isParent) {
+        this.isParent = isParent;
+    }
+
+    public Integer getSort() {
+        return sort;
+    }
+
+    public void setSort(Integer sort) {
+        this.sort = sort;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrandExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrandExample.java	(date 1575720882604)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrandExample.java	(date 1575720882604)
@@ -0,0 +1,470 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TbBrandExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbBrandExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andIdIsNull() {
+            addCriterion("id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIsNotNull() {
+            addCriterion("id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdEqualTo(Long value) {
+            addCriterion("id =", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotEqualTo(Long value) {
+            addCriterion("id <>", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThan(Long value) {
+            addCriterion("id >", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("id >=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThan(Long value) {
+            addCriterion("id <", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThanOrEqualTo(Long value) {
+            addCriterion("id <=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIn(List<Long> values) {
+            addCriterion("id in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotIn(List<Long> values) {
+            addCriterion("id not in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdBetween(Long value1, Long value2) {
+            addCriterion("id between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotBetween(Long value1, Long value2) {
+            addCriterion("id not between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNull() {
+            addCriterion("name is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNotNull() {
+            addCriterion("name is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameEqualTo(String value) {
+            addCriterion("name =", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotEqualTo(String value) {
+            addCriterion("name <>", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThan(String value) {
+            addCriterion("name >", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThanOrEqualTo(String value) {
+            addCriterion("name >=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThan(String value) {
+            addCriterion("name <", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThanOrEqualTo(String value) {
+            addCriterion("name <=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLike(String value) {
+            addCriterion("name like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotLike(String value) {
+            addCriterion("name not like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIn(List<String> values) {
+            addCriterion("name in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotIn(List<String> values) {
+            addCriterion("name not in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameBetween(String value1, String value2) {
+            addCriterion("name between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotBetween(String value1, String value2) {
+            addCriterion("name not between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIsNull() {
+            addCriterion("image is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIsNotNull() {
+            addCriterion("image is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageEqualTo(String value) {
+            addCriterion("image =", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotEqualTo(String value) {
+            addCriterion("image <>", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageGreaterThan(String value) {
+            addCriterion("image >", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageGreaterThanOrEqualTo(String value) {
+            addCriterion("image >=", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLessThan(String value) {
+            addCriterion("image <", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLessThanOrEqualTo(String value) {
+            addCriterion("image <=", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageLike(String value) {
+            addCriterion("image like", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotLike(String value) {
+            addCriterion("image not like", value, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageIn(List<String> values) {
+            addCriterion("image in", values, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotIn(List<String> values) {
+            addCriterion("image not in", values, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageBetween(String value1, String value2) {
+            addCriterion("image between", value1, value2, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andImageNotBetween(String value1, String value2) {
+            addCriterion("image not between", value1, value2, "image");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterIsNull() {
+            addCriterion("letter is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterIsNotNull() {
+            addCriterion("letter is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterEqualTo(String value) {
+            addCriterion("letter =", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterNotEqualTo(String value) {
+            addCriterion("letter <>", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterGreaterThan(String value) {
+            addCriterion("letter >", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterGreaterThanOrEqualTo(String value) {
+            addCriterion("letter >=", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterLessThan(String value) {
+            addCriterion("letter <", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterLessThanOrEqualTo(String value) {
+            addCriterion("letter <=", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterLike(String value) {
+            addCriterion("letter like", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterNotLike(String value) {
+            addCriterion("letter not like", value, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterIn(List<String> values) {
+            addCriterion("letter in", values, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterNotIn(List<String> values) {
+            addCriterion("letter not in", values, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterBetween(String value1, String value2) {
+            addCriterion("letter between", value1, value2, "letter");
+            return (Criteria) this;
+        }
+
+        public Criteria andLetterNotBetween(String value1, String value2) {
+            addCriterion("letter not between", value1, value2, "letter");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandKey.java	(date 1575720882613)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandKey.java	(date 1575720882613)
@@ -0,0 +1,27 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+
+public class TbCategoryBrandKey implements Serializable {
+    private Long categoryId;
+
+    private Long brandId;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getCategoryId() {
+        return categoryId;
+    }
+
+    public void setCategoryId(Long categoryId) {
+        this.categoryId = categoryId;
+    }
+
+    public Long getBrandId() {
+        return brandId;
+    }
+
+    public void setBrandId(Long brandId) {
+        this.brandId = brandId;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrder.java	(date 1575720882620)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrder.java	(date 1575720882620)
@@ -0,0 +1,228 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+import java.util.Date;
+
+public class TbOrder implements Serializable {
+    private Long orderId;
+
+    private Long totalPay;
+
+    private Long actualPay;
+
+    private String promotionIds;
+
+    private Boolean paymentType;
+
+    private Long postFee;
+
+    private Date createTime;
+
+    private String shippingName;
+
+    private String shippingCode;
+
+    private String userId;
+
+    private String buyerMessage;
+
+    private String buyerNick;
+
+    private Boolean buyerRate;
+
+    private String receiverState;
+
+    private String receiverCity;
+
+    private String receiverDistrict;
+
+    private String receiverAddress;
+
+    private String receiverMobile;
+
+    private String receiverZip;
+
+    private String receiver;
+
+    private Integer invoiceType;
+
+    private Integer sourceType;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getOrderId() {
+        return orderId;
+    }
+
+    public void setOrderId(Long orderId) {
+        this.orderId = orderId;
+    }
+
+    public Long getTotalPay() {
+        return totalPay;
+    }
+
+    public void setTotalPay(Long totalPay) {
+        this.totalPay = totalPay;
+    }
+
+    public Long getActualPay() {
+        return actualPay;
+    }
+
+    public void setActualPay(Long actualPay) {
+        this.actualPay = actualPay;
+    }
+
+    public String getPromotionIds() {
+        return promotionIds;
+    }
+
+    public void setPromotionIds(String promotionIds) {
+        this.promotionIds = promotionIds;
+    }
+
+    public Boolean getPaymentType() {
+        return paymentType;
+    }
+
+    public void setPaymentType(Boolean paymentType) {
+        this.paymentType = paymentType;
+    }
+
+    public Long getPostFee() {
+        return postFee;
+    }
+
+    public void setPostFee(Long postFee) {
+        this.postFee = postFee;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public String getShippingName() {
+        return shippingName;
+    }
+
+    public void setShippingName(String shippingName) {
+        this.shippingName = shippingName;
+    }
+
+    public String getShippingCode() {
+        return shippingCode;
+    }
+
+    public void setShippingCode(String shippingCode) {
+        this.shippingCode = shippingCode;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getBuyerMessage() {
+        return buyerMessage;
+    }
+
+    public void setBuyerMessage(String buyerMessage) {
+        this.buyerMessage = buyerMessage;
+    }
+
+    public String getBuyerNick() {
+        return buyerNick;
+    }
+
+    public void setBuyerNick(String buyerNick) {
+        this.buyerNick = buyerNick;
+    }
+
+    public Boolean getBuyerRate() {
+        return buyerRate;
+    }
+
+    public void setBuyerRate(Boolean buyerRate) {
+        this.buyerRate = buyerRate;
+    }
+
+    public String getReceiverState() {
+        return receiverState;
+    }
+
+    public void setReceiverState(String receiverState) {
+        this.receiverState = receiverState;
+    }
+
+    public String getReceiverCity() {
+        return receiverCity;
+    }
+
+    public void setReceiverCity(String receiverCity) {
+        this.receiverCity = receiverCity;
+    }
+
+    public String getReceiverDistrict() {
+        return receiverDistrict;
+    }
+
+    public void setReceiverDistrict(String receiverDistrict) {
+        this.receiverDistrict = receiverDistrict;
+    }
+
+    public String getReceiverAddress() {
+        return receiverAddress;
+    }
+
+    public void setReceiverAddress(String receiverAddress) {
+        this.receiverAddress = receiverAddress;
+    }
+
+    public String getReceiverMobile() {
+        return receiverMobile;
+    }
+
+    public void setReceiverMobile(String receiverMobile) {
+        this.receiverMobile = receiverMobile;
+    }
+
+    public String getReceiverZip() {
+        return receiverZip;
+    }
+
+    public void setReceiverZip(String receiverZip) {
+        this.receiverZip = receiverZip;
+    }
+
+    public String getReceiver() {
+        return receiver;
+    }
+
+    public void setReceiver(String receiver) {
+        this.receiver = receiver;
+    }
+
+    public Integer getInvoiceType() {
+        return invoiceType;
+    }
+
+    public void setInvoiceType(Integer invoiceType) {
+        this.invoiceType = invoiceType;
+    }
+
+    public Integer getSourceType() {
+        return sourceType;
+    }
+
+    public void setSourceType(Integer sourceType) {
+        this.sourceType = sourceType;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCouponExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCouponExample.java	(date 1575720882616)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCouponExample.java	(date 1575720882616)
@@ -0,0 +1,831 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+public class TbCouponExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbCouponExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andIdIsNull() {
+            addCriterion("id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIsNotNull() {
+            addCriterion("id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdEqualTo(Long value) {
+            addCriterion("id =", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotEqualTo(Long value) {
+            addCriterion("id <>", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThan(Long value) {
+            addCriterion("id >", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("id >=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThan(Long value) {
+            addCriterion("id <", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThanOrEqualTo(Long value) {
+            addCriterion("id <=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIn(List<Long> values) {
+            addCriterion("id in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotIn(List<Long> values) {
+            addCriterion("id not in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdBetween(Long value1, Long value2) {
+            addCriterion("id between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotBetween(Long value1, Long value2) {
+            addCriterion("id not between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNull() {
+            addCriterion("name is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNotNull() {
+            addCriterion("name is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameEqualTo(String value) {
+            addCriterion("name =", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotEqualTo(String value) {
+            addCriterion("name <>", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThan(String value) {
+            addCriterion("name >", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThanOrEqualTo(String value) {
+            addCriterion("name >=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThan(String value) {
+            addCriterion("name <", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThanOrEqualTo(String value) {
+            addCriterion("name <=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLike(String value) {
+            addCriterion("name like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotLike(String value) {
+            addCriterion("name not like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIn(List<String> values) {
+            addCriterion("name in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotIn(List<String> values) {
+            addCriterion("name not in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameBetween(String value1, String value2) {
+            addCriterion("name between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotBetween(String value1, String value2) {
+            addCriterion("name not between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIsNull() {
+            addCriterion("type is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIsNotNull() {
+            addCriterion("type is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeEqualTo(String value) {
+            addCriterion("type =", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotEqualTo(String value) {
+            addCriterion("type <>", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeGreaterThan(String value) {
+            addCriterion("type >", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeGreaterThanOrEqualTo(String value) {
+            addCriterion("type >=", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeLessThan(String value) {
+            addCriterion("type <", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeLessThanOrEqualTo(String value) {
+            addCriterion("type <=", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeLike(String value) {
+            addCriterion("type like", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotLike(String value) {
+            addCriterion("type not like", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIn(List<String> values) {
+            addCriterion("type in", values, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotIn(List<String> values) {
+            addCriterion("type not in", values, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeBetween(String value1, String value2) {
+            addCriterion("type between", value1, value2, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotBetween(String value1, String value2) {
+            addCriterion("type not between", value1, value2, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionIsNull() {
+            addCriterion("condition is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionIsNotNull() {
+            addCriterion("condition is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionEqualTo(Long value) {
+            addCriterion("condition =", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionNotEqualTo(Long value) {
+            addCriterion("condition <>", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionGreaterThan(Long value) {
+            addCriterion("condition >", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionGreaterThanOrEqualTo(Long value) {
+            addCriterion("condition >=", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionLessThan(Long value) {
+            addCriterion("condition <", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionLessThanOrEqualTo(Long value) {
+            addCriterion("condition <=", value, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionIn(List<Long> values) {
+            addCriterion("condition in", values, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionNotIn(List<Long> values) {
+            addCriterion("condition not in", values, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionBetween(Long value1, Long value2) {
+            addCriterion("condition between", value1, value2, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andConditionNotBetween(Long value1, Long value2) {
+            addCriterion("condition not between", value1, value2, "condition");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionIsNull() {
+            addCriterion("reduction is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionIsNotNull() {
+            addCriterion("reduction is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionEqualTo(Long value) {
+            addCriterion("reduction =", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionNotEqualTo(Long value) {
+            addCriterion("reduction <>", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionGreaterThan(Long value) {
+            addCriterion("reduction >", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionGreaterThanOrEqualTo(Long value) {
+            addCriterion("reduction >=", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionLessThan(Long value) {
+            addCriterion("reduction <", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionLessThanOrEqualTo(Long value) {
+            addCriterion("reduction <=", value, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionIn(List<Long> values) {
+            addCriterion("reduction in", values, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionNotIn(List<Long> values) {
+            addCriterion("reduction not in", values, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionBetween(Long value1, Long value2) {
+            addCriterion("reduction between", value1, value2, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andReductionNotBetween(Long value1, Long value2) {
+            addCriterion("reduction not between", value1, value2, "reduction");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountIsNull() {
+            addCriterion("discount is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountIsNotNull() {
+            addCriterion("discount is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountEqualTo(Integer value) {
+            addCriterion("discount =", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountNotEqualTo(Integer value) {
+            addCriterion("discount <>", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountGreaterThan(Integer value) {
+            addCriterion("discount >", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountGreaterThanOrEqualTo(Integer value) {
+            addCriterion("discount >=", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountLessThan(Integer value) {
+            addCriterion("discount <", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountLessThanOrEqualTo(Integer value) {
+            addCriterion("discount <=", value, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountIn(List<Integer> values) {
+            addCriterion("discount in", values, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountNotIn(List<Integer> values) {
+            addCriterion("discount not in", values, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountBetween(Integer value1, Integer value2) {
+            addCriterion("discount between", value1, value2, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andDiscountNotBetween(Integer value1, Integer value2) {
+            addCriterion("discount not between", value1, value2, "discount");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsIsNull() {
+            addCriterion("targets is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsIsNotNull() {
+            addCriterion("targets is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsEqualTo(String value) {
+            addCriterion("targets =", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsNotEqualTo(String value) {
+            addCriterion("targets <>", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsGreaterThan(String value) {
+            addCriterion("targets >", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsGreaterThanOrEqualTo(String value) {
+            addCriterion("targets >=", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsLessThan(String value) {
+            addCriterion("targets <", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsLessThanOrEqualTo(String value) {
+            addCriterion("targets <=", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsLike(String value) {
+            addCriterion("targets like", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsNotLike(String value) {
+            addCriterion("targets not like", value, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsIn(List<String> values) {
+            addCriterion("targets in", values, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsNotIn(List<String> values) {
+            addCriterion("targets not in", values, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsBetween(String value1, String value2) {
+            addCriterion("targets between", value1, value2, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andTargetsNotBetween(String value1, String value2) {
+            addCriterion("targets not between", value1, value2, "targets");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockIsNull() {
+            addCriterion("stock is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockIsNotNull() {
+            addCriterion("stock is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockEqualTo(Integer value) {
+            addCriterion("stock =", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockNotEqualTo(Integer value) {
+            addCriterion("stock <>", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockGreaterThan(Integer value) {
+            addCriterion("stock >", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockGreaterThanOrEqualTo(Integer value) {
+            addCriterion("stock >=", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockLessThan(Integer value) {
+            addCriterion("stock <", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockLessThanOrEqualTo(Integer value) {
+            addCriterion("stock <=", value, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockIn(List<Integer> values) {
+            addCriterion("stock in", values, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockNotIn(List<Integer> values) {
+            addCriterion("stock not in", values, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockBetween(Integer value1, Integer value2) {
+            addCriterion("stock between", value1, value2, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStockNotBetween(Integer value1, Integer value2) {
+            addCriterion("stock not between", value1, value2, "stock");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeIsNull() {
+            addCriterion("start_time is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeIsNotNull() {
+            addCriterion("start_time is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeEqualTo(Date value) {
+            addCriterion("start_time =", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeNotEqualTo(Date value) {
+            addCriterion("start_time <>", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeGreaterThan(Date value) {
+            addCriterion("start_time >", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeGreaterThanOrEqualTo(Date value) {
+            addCriterion("start_time >=", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeLessThan(Date value) {
+            addCriterion("start_time <", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeLessThanOrEqualTo(Date value) {
+            addCriterion("start_time <=", value, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeIn(List<Date> values) {
+            addCriterion("start_time in", values, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeNotIn(List<Date> values) {
+            addCriterion("start_time not in", values, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeBetween(Date value1, Date value2) {
+            addCriterion("start_time between", value1, value2, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andStartTimeNotBetween(Date value1, Date value2) {
+            addCriterion("start_time not between", value1, value2, "startTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeIsNull() {
+            addCriterion("end_time is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeIsNotNull() {
+            addCriterion("end_time is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeEqualTo(Date value) {
+            addCriterion("end_time =", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeNotEqualTo(Date value) {
+            addCriterion("end_time <>", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeGreaterThan(Date value) {
+            addCriterion("end_time >", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeGreaterThanOrEqualTo(Date value) {
+            addCriterion("end_time >=", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeLessThan(Date value) {
+            addCriterion("end_time <", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeLessThanOrEqualTo(Date value) {
+            addCriterion("end_time <=", value, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeIn(List<Date> values) {
+            addCriterion("end_time in", values, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeNotIn(List<Date> values) {
+            addCriterion("end_time not in", values, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeBetween(Date value1, Date value2) {
+            addCriterion("end_time between", value1, value2, "endTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andEndTimeNotBetween(Date value1, Date value2) {
+            addCriterion("end_time not between", value1, value2, "endTime");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryExample.java	(date 1575720882608)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryExample.java	(date 1575720882608)
@@ -0,0 +1,510 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TbCategoryExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbCategoryExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andIdIsNull() {
+            addCriterion("id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIsNotNull() {
+            addCriterion("id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdEqualTo(Long value) {
+            addCriterion("id =", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotEqualTo(Long value) {
+            addCriterion("id <>", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThan(Long value) {
+            addCriterion("id >", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("id >=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThan(Long value) {
+            addCriterion("id <", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThanOrEqualTo(Long value) {
+            addCriterion("id <=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIn(List<Long> values) {
+            addCriterion("id in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotIn(List<Long> values) {
+            addCriterion("id not in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdBetween(Long value1, Long value2) {
+            addCriterion("id between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotBetween(Long value1, Long value2) {
+            addCriterion("id not between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNull() {
+            addCriterion("name is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIsNotNull() {
+            addCriterion("name is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameEqualTo(String value) {
+            addCriterion("name =", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotEqualTo(String value) {
+            addCriterion("name <>", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThan(String value) {
+            addCriterion("name >", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameGreaterThanOrEqualTo(String value) {
+            addCriterion("name >=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThan(String value) {
+            addCriterion("name <", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLessThanOrEqualTo(String value) {
+            addCriterion("name <=", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameLike(String value) {
+            addCriterion("name like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotLike(String value) {
+            addCriterion("name not like", value, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameIn(List<String> values) {
+            addCriterion("name in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotIn(List<String> values) {
+            addCriterion("name not in", values, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameBetween(String value1, String value2) {
+            addCriterion("name between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andNameNotBetween(String value1, String value2) {
+            addCriterion("name not between", value1, value2, "name");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdIsNull() {
+            addCriterion("parent_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdIsNotNull() {
+            addCriterion("parent_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdEqualTo(Long value) {
+            addCriterion("parent_id =", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdNotEqualTo(Long value) {
+            addCriterion("parent_id <>", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdGreaterThan(Long value) {
+            addCriterion("parent_id >", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("parent_id >=", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdLessThan(Long value) {
+            addCriterion("parent_id <", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdLessThanOrEqualTo(Long value) {
+            addCriterion("parent_id <=", value, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdIn(List<Long> values) {
+            addCriterion("parent_id in", values, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdNotIn(List<Long> values) {
+            addCriterion("parent_id not in", values, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdBetween(Long value1, Long value2) {
+            addCriterion("parent_id between", value1, value2, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andParentIdNotBetween(Long value1, Long value2) {
+            addCriterion("parent_id not between", value1, value2, "parentId");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentIsNull() {
+            addCriterion("is_parent is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentIsNotNull() {
+            addCriterion("is_parent is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentEqualTo(Boolean value) {
+            addCriterion("is_parent =", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentNotEqualTo(Boolean value) {
+            addCriterion("is_parent <>", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentGreaterThan(Boolean value) {
+            addCriterion("is_parent >", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentGreaterThanOrEqualTo(Boolean value) {
+            addCriterion("is_parent >=", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentLessThan(Boolean value) {
+            addCriterion("is_parent <", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentLessThanOrEqualTo(Boolean value) {
+            addCriterion("is_parent <=", value, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentIn(List<Boolean> values) {
+            addCriterion("is_parent in", values, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentNotIn(List<Boolean> values) {
+            addCriterion("is_parent not in", values, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentBetween(Boolean value1, Boolean value2) {
+            addCriterion("is_parent between", value1, value2, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andIsParentNotBetween(Boolean value1, Boolean value2) {
+            addCriterion("is_parent not between", value1, value2, "isParent");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortIsNull() {
+            addCriterion("sort is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortIsNotNull() {
+            addCriterion("sort is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortEqualTo(Integer value) {
+            addCriterion("sort =", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortNotEqualTo(Integer value) {
+            addCriterion("sort <>", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortGreaterThan(Integer value) {
+            addCriterion("sort >", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortGreaterThanOrEqualTo(Integer value) {
+            addCriterion("sort >=", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortLessThan(Integer value) {
+            addCriterion("sort <", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortLessThanOrEqualTo(Integer value) {
+            addCriterion("sort <=", value, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortIn(List<Integer> values) {
+            addCriterion("sort in", values, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortNotIn(List<Integer> values) {
+            addCriterion("sort not in", values, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortBetween(Integer value1, Integer value2) {
+            addCriterion("sort between", value1, value2, "sort");
+            return (Criteria) this;
+        }
+
+        public Criteria andSortNotBetween(Integer value1, Integer value2) {
+            addCriterion("sort not between", value1, value2, "sort");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandExample.java	(date 1575720882612)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCategoryBrandExample.java	(date 1575720882612)
@@ -0,0 +1,320 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TbCategoryBrandExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbCategoryBrandExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andCategoryIdIsNull() {
+            addCriterion("category_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdIsNotNull() {
+            addCriterion("category_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdEqualTo(Long value) {
+            addCriterion("category_id =", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdNotEqualTo(Long value) {
+            addCriterion("category_id <>", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdGreaterThan(Long value) {
+            addCriterion("category_id >", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("category_id >=", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdLessThan(Long value) {
+            addCriterion("category_id <", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdLessThanOrEqualTo(Long value) {
+            addCriterion("category_id <=", value, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdIn(List<Long> values) {
+            addCriterion("category_id in", values, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdNotIn(List<Long> values) {
+            addCriterion("category_id not in", values, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdBetween(Long value1, Long value2) {
+            addCriterion("category_id between", value1, value2, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andCategoryIdNotBetween(Long value1, Long value2) {
+            addCriterion("category_id not between", value1, value2, "categoryId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdIsNull() {
+            addCriterion("brand_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdIsNotNull() {
+            addCriterion("brand_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdEqualTo(Long value) {
+            addCriterion("brand_id =", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdNotEqualTo(Long value) {
+            addCriterion("brand_id <>", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdGreaterThan(Long value) {
+            addCriterion("brand_id >", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("brand_id >=", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdLessThan(Long value) {
+            addCriterion("brand_id <", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdLessThanOrEqualTo(Long value) {
+            addCriterion("brand_id <=", value, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdIn(List<Long> values) {
+            addCriterion("brand_id in", values, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdNotIn(List<Long> values) {
+            addCriterion("brand_id not in", values, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdBetween(Long value1, Long value2) {
+            addCriterion("brand_id between", value1, value2, "brandId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBrandIdNotBetween(Long value1, Long value2) {
+            addCriterion("brand_id not between", value1, value2, "brandId");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/mapper/TbCouponMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbCouponMapper.xml	(date 1575720882599)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbCouponMapper.xml	(date 1575720882599)
@@ -0,0 +1,290 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbCouponMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbCoupon">
+    <id column="id" jdbcType="BIGINT" property="id" />
+    <result column="name" jdbcType="VARCHAR" property="name" />
+    <result column="type" jdbcType="CHAR" property="type" />
+    <result column="condition" jdbcType="BIGINT" property="condition" />
+    <result column="reduction" jdbcType="BIGINT" property="reduction" />
+    <result column="discount" jdbcType="INTEGER" property="discount" />
+    <result column="targets" jdbcType="VARCHAR" property="targets" />
+    <result column="stock" jdbcType="INTEGER" property="stock" />
+    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
+    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, name, type, condition, reduction, discount, targets, stock, start_time, end_time
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbCouponExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_coupon
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from tb_coupon
+    where id = #{id,jdbcType=BIGINT}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
+    delete from tb_coupon
+    where id = #{id,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbCouponExample">
+    delete from tb_coupon
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbCoupon">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_coupon (name, type, condition, 
+      reduction, discount, targets, 
+      stock, start_time, end_time
+      )
+    values (#{name,jdbcType=VARCHAR}, #{type,jdbcType=CHAR}, #{condition,jdbcType=BIGINT}, 
+      #{reduction,jdbcType=BIGINT}, #{discount,jdbcType=INTEGER}, #{targets,jdbcType=VARCHAR}, 
+      #{stock,jdbcType=INTEGER}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}
+      )
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbCoupon">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_coupon
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        name,
+      </if>
+      <if test="type != null">
+        type,
+      </if>
+      <if test="condition != null">
+        condition,
+      </if>
+      <if test="reduction != null">
+        reduction,
+      </if>
+      <if test="discount != null">
+        discount,
+      </if>
+      <if test="targets != null">
+        targets,
+      </if>
+      <if test="stock != null">
+        stock,
+      </if>
+      <if test="startTime != null">
+        start_time,
+      </if>
+      <if test="endTime != null">
+        end_time,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="type != null">
+        #{type,jdbcType=CHAR},
+      </if>
+      <if test="condition != null">
+        #{condition,jdbcType=BIGINT},
+      </if>
+      <if test="reduction != null">
+        #{reduction,jdbcType=BIGINT},
+      </if>
+      <if test="discount != null">
+        #{discount,jdbcType=INTEGER},
+      </if>
+      <if test="targets != null">
+        #{targets,jdbcType=VARCHAR},
+      </if>
+      <if test="stock != null">
+        #{stock,jdbcType=INTEGER},
+      </if>
+      <if test="startTime != null">
+        #{startTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="endTime != null">
+        #{endTime,jdbcType=TIMESTAMP},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbCouponExample" resultType="java.lang.Long">
+    select count(*) from tb_coupon
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_coupon
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=BIGINT},
+      </if>
+      <if test="record.name != null">
+        name = #{record.name,jdbcType=VARCHAR},
+      </if>
+      <if test="record.type != null">
+        type = #{record.type,jdbcType=CHAR},
+      </if>
+      <if test="record.condition != null">
+        condition = #{record.condition,jdbcType=BIGINT},
+      </if>
+      <if test="record.reduction != null">
+        reduction = #{record.reduction,jdbcType=BIGINT},
+      </if>
+      <if test="record.discount != null">
+        discount = #{record.discount,jdbcType=INTEGER},
+      </if>
+      <if test="record.targets != null">
+        targets = #{record.targets,jdbcType=VARCHAR},
+      </if>
+      <if test="record.stock != null">
+        stock = #{record.stock,jdbcType=INTEGER},
+      </if>
+      <if test="record.startTime != null">
+        start_time = #{record.startTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.endTime != null">
+        end_time = #{record.endTime,jdbcType=TIMESTAMP},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_coupon
+    set id = #{record.id,jdbcType=BIGINT},
+      name = #{record.name,jdbcType=VARCHAR},
+      type = #{record.type,jdbcType=CHAR},
+      condition = #{record.condition,jdbcType=BIGINT},
+      reduction = #{record.reduction,jdbcType=BIGINT},
+      discount = #{record.discount,jdbcType=INTEGER},
+      targets = #{record.targets,jdbcType=VARCHAR},
+      stock = #{record.stock,jdbcType=INTEGER},
+      start_time = #{record.startTime,jdbcType=TIMESTAMP},
+      end_time = #{record.endTime,jdbcType=TIMESTAMP}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.leyou.po.TbCoupon">
+    update tb_coupon
+    <set>
+      <if test="name != null">
+        name = #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="type != null">
+        type = #{type,jdbcType=CHAR},
+      </if>
+      <if test="condition != null">
+        condition = #{condition,jdbcType=BIGINT},
+      </if>
+      <if test="reduction != null">
+        reduction = #{reduction,jdbcType=BIGINT},
+      </if>
+      <if test="discount != null">
+        discount = #{discount,jdbcType=INTEGER},
+      </if>
+      <if test="targets != null">
+        targets = #{targets,jdbcType=VARCHAR},
+      </if>
+      <if test="stock != null">
+        stock = #{stock,jdbcType=INTEGER},
+      </if>
+      <if test="startTime != null">
+        start_time = #{startTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="endTime != null">
+        end_time = #{endTime,jdbcType=TIMESTAMP},
+      </if>
+    </set>
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.leyou.po.TbCoupon">
+    update tb_coupon
+    set name = #{name,jdbcType=VARCHAR},
+      type = #{type,jdbcType=CHAR},
+      condition = #{condition,jdbcType=BIGINT},
+      reduction = #{reduction,jdbcType=BIGINT},
+      discount = #{discount,jdbcType=INTEGER},
+      targets = #{targets,jdbcType=VARCHAR},
+      stock = #{stock,jdbcType=INTEGER},
+      start_time = #{startTime,jdbcType=TIMESTAMP},
+      end_time = #{endTime,jdbcType=TIMESTAMP}
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+</mapper>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/mapper/TbOrderDetailMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbOrderDetailMapper.xml	(date 1575720882602)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbOrderDetailMapper.xml	(date 1575720882602)
@@ -0,0 +1,258 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbOrderDetailMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbOrderDetail">
+    <id column="id" jdbcType="BIGINT" property="id" />
+    <result column="order_id" jdbcType="BIGINT" property="orderId" />
+    <result column="sku_id" jdbcType="BIGINT" property="skuId" />
+    <result column="num" jdbcType="INTEGER" property="num" />
+    <result column="title" jdbcType="VARCHAR" property="title" />
+    <result column="own_spec" jdbcType="VARCHAR" property="ownSpec" />
+    <result column="price" jdbcType="BIGINT" property="price" />
+    <result column="image" jdbcType="VARCHAR" property="image" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, order_id, sku_id, num, title, own_spec, price, image
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbOrderDetailExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_order_detail
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from tb_order_detail
+    where id = #{id,jdbcType=BIGINT}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
+    delete from tb_order_detail
+    where id = #{id,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbOrderDetailExample">
+    delete from tb_order_detail
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbOrderDetail">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_order_detail (order_id, sku_id, num, 
+      title, own_spec, price, 
+      image)
+    values (#{orderId,jdbcType=BIGINT}, #{skuId,jdbcType=BIGINT}, #{num,jdbcType=INTEGER}, 
+      #{title,jdbcType=VARCHAR}, #{ownSpec,jdbcType=VARCHAR}, #{price,jdbcType=BIGINT}, 
+      #{image,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbOrderDetail">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_order_detail
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="orderId != null">
+        order_id,
+      </if>
+      <if test="skuId != null">
+        sku_id,
+      </if>
+      <if test="num != null">
+        num,
+      </if>
+      <if test="title != null">
+        title,
+      </if>
+      <if test="ownSpec != null">
+        own_spec,
+      </if>
+      <if test="price != null">
+        price,
+      </if>
+      <if test="image != null">
+        image,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="orderId != null">
+        #{orderId,jdbcType=BIGINT},
+      </if>
+      <if test="skuId != null">
+        #{skuId,jdbcType=BIGINT},
+      </if>
+      <if test="num != null">
+        #{num,jdbcType=INTEGER},
+      </if>
+      <if test="title != null">
+        #{title,jdbcType=VARCHAR},
+      </if>
+      <if test="ownSpec != null">
+        #{ownSpec,jdbcType=VARCHAR},
+      </if>
+      <if test="price != null">
+        #{price,jdbcType=BIGINT},
+      </if>
+      <if test="image != null">
+        #{image,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbOrderDetailExample" resultType="java.lang.Long">
+    select count(*) from tb_order_detail
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_order_detail
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=BIGINT},
+      </if>
+      <if test="record.orderId != null">
+        order_id = #{record.orderId,jdbcType=BIGINT},
+      </if>
+      <if test="record.skuId != null">
+        sku_id = #{record.skuId,jdbcType=BIGINT},
+      </if>
+      <if test="record.num != null">
+        num = #{record.num,jdbcType=INTEGER},
+      </if>
+      <if test="record.title != null">
+        title = #{record.title,jdbcType=VARCHAR},
+      </if>
+      <if test="record.ownSpec != null">
+        own_spec = #{record.ownSpec,jdbcType=VARCHAR},
+      </if>
+      <if test="record.price != null">
+        price = #{record.price,jdbcType=BIGINT},
+      </if>
+      <if test="record.image != null">
+        image = #{record.image,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_order_detail
+    set id = #{record.id,jdbcType=BIGINT},
+      order_id = #{record.orderId,jdbcType=BIGINT},
+      sku_id = #{record.skuId,jdbcType=BIGINT},
+      num = #{record.num,jdbcType=INTEGER},
+      title = #{record.title,jdbcType=VARCHAR},
+      own_spec = #{record.ownSpec,jdbcType=VARCHAR},
+      price = #{record.price,jdbcType=BIGINT},
+      image = #{record.image,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.leyou.po.TbOrderDetail">
+    update tb_order_detail
+    <set>
+      <if test="orderId != null">
+        order_id = #{orderId,jdbcType=BIGINT},
+      </if>
+      <if test="skuId != null">
+        sku_id = #{skuId,jdbcType=BIGINT},
+      </if>
+      <if test="num != null">
+        num = #{num,jdbcType=INTEGER},
+      </if>
+      <if test="title != null">
+        title = #{title,jdbcType=VARCHAR},
+      </if>
+      <if test="ownSpec != null">
+        own_spec = #{ownSpec,jdbcType=VARCHAR},
+      </if>
+      <if test="price != null">
+        price = #{price,jdbcType=BIGINT},
+      </if>
+      <if test="image != null">
+        image = #{image,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.leyou.po.TbOrderDetail">
+    update tb_order_detail
+    set order_id = #{orderId,jdbcType=BIGINT},
+      sku_id = #{skuId,jdbcType=BIGINT},
+      num = #{num,jdbcType=INTEGER},
+      title = #{title,jdbcType=VARCHAR},
+      own_spec = #{ownSpec,jdbcType=VARCHAR},
+      price = #{price,jdbcType=BIGINT},
+      image = #{image,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+</mapper>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ .idea/encodings.xml	(date 1574059612807)
@@ -2,7 +2,12 @@
 <project version="4">
   <component name="Encoding">
     <file url="file://$PROJECT_DIR$" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/ly-common" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/ly-gateway" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/ly-item" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/ly-item/ly-item-interface" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/ly-item/ly-item-service" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/ly-registry" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/../tsop/oscarbossweb" charset="UTF-8" />
   </component>
 </project>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/mapper/TbCategoryBrandMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbCategoryBrandMapper.xml	(date 1575720882598)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbCategoryBrandMapper.xml	(date 1575720882598)
@@ -0,0 +1,145 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbCategoryBrandMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbCategoryBrandKey">
+    <id column="category_id" jdbcType="BIGINT" property="categoryId" />
+    <id column="brand_id" jdbcType="BIGINT" property="brandId" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    category_id, brand_id
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbCategoryBrandExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_category_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="com.leyou.po.TbCategoryBrandKey">
+    delete from tb_category_brand
+    where category_id = #{categoryId,jdbcType=BIGINT}
+      and brand_id = #{brandId,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbCategoryBrandExample">
+    delete from tb_category_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbCategoryBrandKey">
+    insert into tb_category_brand (category_id, brand_id)
+    values (#{categoryId,jdbcType=BIGINT}, #{brandId,jdbcType=BIGINT})
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbCategoryBrandKey">
+    insert into tb_category_brand
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="categoryId != null">
+        category_id,
+      </if>
+      <if test="brandId != null">
+        brand_id,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="categoryId != null">
+        #{categoryId,jdbcType=BIGINT},
+      </if>
+      <if test="brandId != null">
+        #{brandId,jdbcType=BIGINT},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbCategoryBrandExample" resultType="java.lang.Long">
+    select count(*) from tb_category_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_category_brand
+    <set>
+      <if test="record.categoryId != null">
+        category_id = #{record.categoryId,jdbcType=BIGINT},
+      </if>
+      <if test="record.brandId != null">
+        brand_id = #{record.brandId,jdbcType=BIGINT},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_category_brand
+    set category_id = #{record.categoryId,jdbcType=BIGINT},
+      brand_id = #{record.brandId,jdbcType=BIGINT}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+</mapper>
\ No newline at end of file
Index: ly-item/ly-item-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/pom.xml	(date 1575728773757)
+++ ly-item/ly-item-service/pom.xml	(date 1575728773757)
@@ -0,0 +1,109 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>ly-item</artifactId>
+        <groupId>com.leyou.service</groupId>
+        <version>1.0.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.leyou.service</groupId>
+    <artifactId>ly-item-service</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.cloud</groupId>
+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>tk.mybatis</groupId>
+            <artifactId>mapper-spring-boot-starter</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.github.pagehelper</groupId>
+            <artifactId>pagehelper-spring-boot-starter</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.leyou.service</groupId>
+            <artifactId>ly-item-interface</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-mongodb</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <!--逆向工程插件需要的依赖包，没有逆向工程插件可能会找不到数据库驱动错误-->
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <version>8.0.13</version>
+            <scope>runtime</scope>
+        </dependency>
+        <!-- mybatis逆向工程jar包 -->
+        <dependency>
+            <groupId>org.mybatis</groupId>
+            <artifactId>mybatis</artifactId>
+            <version>3.4.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis.generator</groupId>
+            <artifactId>mybatis-generator-core</artifactId>
+            <version>1.3.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>io.micrometer</groupId>
+            <artifactId>micrometer-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <!--mybatis.generator逆向工程，maven版本主要配置下面信息-->
+    <build>
+        <plugins>
+            <!--maven插件-->
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+            <!--mybatis-generator插件-->
+            <plugin>
+                <groupId>org.mybatis.generator</groupId>
+                <artifactId>mybatis-generator-maven-plugin</artifactId>
+                <version>1.3.5</version>
+                <!--指定资源文件的路径-->
+                <configuration>
+                    <configurationFile>src\main\resources\generator\generatorConfig.xml</configurationFile>
+                    <verbose>true</verbose>
+                    <overwrite>true</overwrite>
+                </configuration>
+                <!--此插件需要依赖的jar包资源-->
+                <dependencies>
+                    <dependency>
+                        <groupId>mysql</groupId>
+                        <artifactId>mysql-connector-java</artifactId>
+                        <version>8.0.13</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+        </plugins>
+    </build>
+
+
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ .idea/compiler.xml	(date 1575717359856)
@@ -6,15 +6,25 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
-        <module name="ly-gateway" />
+        <module name="ly-item-interface" />
+        <module name="ly-common" />
         <module name="ly-registry" />
+        <module name="ly-gateway" />
+        <module name="ly-item-service" />
       </profile>
     </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="oscarboss-oscarbossweb" target="1.5" />
+    </bytecodeTargetLevel>
   </component>
   <component name="JavacSettings">
     <option name="ADDITIONAL_OPTIONS_OVERRIDE">
-      <module name="leyou" options="-parameters" />
+      <module name="ly" options="-parameters" />
+      <module name="ly-common" options="-parameters" />
       <module name="ly-gateway" options="-parameters" />
+      <module name="ly-item" options="-parameters" />
+      <module name="ly-item-interface" options="-parameters" />
+      <module name="ly-item-service" options="-parameters" />
       <module name="ly-registry" options="-parameters" />
     </option>
   </component>
Index: ly-item/ly-item-service/src/main/resources/mapper/TbOrderMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbOrderMapper.xml	(date 1575720882601)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbOrderMapper.xml	(date 1575720882601)
@@ -0,0 +1,481 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbOrderMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbOrder">
+    <id column="order_id" jdbcType="BIGINT" property="orderId" />
+    <result column="total_pay" jdbcType="BIGINT" property="totalPay" />
+    <result column="actual_pay" jdbcType="BIGINT" property="actualPay" />
+    <result column="promotion_ids" jdbcType="VARCHAR" property="promotionIds" />
+    <result column="payment_type" jdbcType="BIT" property="paymentType" />
+    <result column="post_fee" jdbcType="BIGINT" property="postFee" />
+    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
+    <result column="shipping_name" jdbcType="VARCHAR" property="shippingName" />
+    <result column="shipping_code" jdbcType="VARCHAR" property="shippingCode" />
+    <result column="user_id" jdbcType="VARCHAR" property="userId" />
+    <result column="buyer_message" jdbcType="VARCHAR" property="buyerMessage" />
+    <result column="buyer_nick" jdbcType="VARCHAR" property="buyerNick" />
+    <result column="buyer_rate" jdbcType="BIT" property="buyerRate" />
+    <result column="receiver_state" jdbcType="VARCHAR" property="receiverState" />
+    <result column="receiver_city" jdbcType="VARCHAR" property="receiverCity" />
+    <result column="receiver_district" jdbcType="VARCHAR" property="receiverDistrict" />
+    <result column="receiver_address" jdbcType="VARCHAR" property="receiverAddress" />
+    <result column="receiver_mobile" jdbcType="VARCHAR" property="receiverMobile" />
+    <result column="receiver_zip" jdbcType="VARCHAR" property="receiverZip" />
+    <result column="receiver" jdbcType="VARCHAR" property="receiver" />
+    <result column="invoice_type" jdbcType="INTEGER" property="invoiceType" />
+    <result column="source_type" jdbcType="INTEGER" property="sourceType" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    order_id, total_pay, actual_pay, promotion_ids, payment_type, post_fee, create_time, 
+    shipping_name, shipping_code, user_id, buyer_message, buyer_nick, buyer_rate, receiver_state, 
+    receiver_city, receiver_district, receiver_address, receiver_mobile, receiver_zip, 
+    receiver, invoice_type, source_type
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbOrderExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_order
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from tb_order
+    where order_id = #{orderId,jdbcType=BIGINT}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
+    delete from tb_order
+    where order_id = #{orderId,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbOrderExample">
+    delete from tb_order
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbOrder">
+    insert into tb_order (order_id, total_pay, actual_pay, 
+      promotion_ids, payment_type, post_fee, 
+      create_time, shipping_name, shipping_code, 
+      user_id, buyer_message, buyer_nick, 
+      buyer_rate, receiver_state, receiver_city, 
+      receiver_district, receiver_address, receiver_mobile, 
+      receiver_zip, receiver, invoice_type, 
+      source_type)
+    values (#{orderId,jdbcType=BIGINT}, #{totalPay,jdbcType=BIGINT}, #{actualPay,jdbcType=BIGINT}, 
+      #{promotionIds,jdbcType=VARCHAR}, #{paymentType,jdbcType=BIT}, #{postFee,jdbcType=BIGINT}, 
+      #{createTime,jdbcType=TIMESTAMP}, #{shippingName,jdbcType=VARCHAR}, #{shippingCode,jdbcType=VARCHAR}, 
+      #{userId,jdbcType=VARCHAR}, #{buyerMessage,jdbcType=VARCHAR}, #{buyerNick,jdbcType=VARCHAR}, 
+      #{buyerRate,jdbcType=BIT}, #{receiverState,jdbcType=VARCHAR}, #{receiverCity,jdbcType=VARCHAR}, 
+      #{receiverDistrict,jdbcType=VARCHAR}, #{receiverAddress,jdbcType=VARCHAR}, #{receiverMobile,jdbcType=VARCHAR}, 
+      #{receiverZip,jdbcType=VARCHAR}, #{receiver,jdbcType=VARCHAR}, #{invoiceType,jdbcType=INTEGER}, 
+      #{sourceType,jdbcType=INTEGER})
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbOrder">
+    insert into tb_order
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="orderId != null">
+        order_id,
+      </if>
+      <if test="totalPay != null">
+        total_pay,
+      </if>
+      <if test="actualPay != null">
+        actual_pay,
+      </if>
+      <if test="promotionIds != null">
+        promotion_ids,
+      </if>
+      <if test="paymentType != null">
+        payment_type,
+      </if>
+      <if test="postFee != null">
+        post_fee,
+      </if>
+      <if test="createTime != null">
+        create_time,
+      </if>
+      <if test="shippingName != null">
+        shipping_name,
+      </if>
+      <if test="shippingCode != null">
+        shipping_code,
+      </if>
+      <if test="userId != null">
+        user_id,
+      </if>
+      <if test="buyerMessage != null">
+        buyer_message,
+      </if>
+      <if test="buyerNick != null">
+        buyer_nick,
+      </if>
+      <if test="buyerRate != null">
+        buyer_rate,
+      </if>
+      <if test="receiverState != null">
+        receiver_state,
+      </if>
+      <if test="receiverCity != null">
+        receiver_city,
+      </if>
+      <if test="receiverDistrict != null">
+        receiver_district,
+      </if>
+      <if test="receiverAddress != null">
+        receiver_address,
+      </if>
+      <if test="receiverMobile != null">
+        receiver_mobile,
+      </if>
+      <if test="receiverZip != null">
+        receiver_zip,
+      </if>
+      <if test="receiver != null">
+        receiver,
+      </if>
+      <if test="invoiceType != null">
+        invoice_type,
+      </if>
+      <if test="sourceType != null">
+        source_type,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="orderId != null">
+        #{orderId,jdbcType=BIGINT},
+      </if>
+      <if test="totalPay != null">
+        #{totalPay,jdbcType=BIGINT},
+      </if>
+      <if test="actualPay != null">
+        #{actualPay,jdbcType=BIGINT},
+      </if>
+      <if test="promotionIds != null">
+        #{promotionIds,jdbcType=VARCHAR},
+      </if>
+      <if test="paymentType != null">
+        #{paymentType,jdbcType=BIT},
+      </if>
+      <if test="postFee != null">
+        #{postFee,jdbcType=BIGINT},
+      </if>
+      <if test="createTime != null">
+        #{createTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="shippingName != null">
+        #{shippingName,jdbcType=VARCHAR},
+      </if>
+      <if test="shippingCode != null">
+        #{shippingCode,jdbcType=VARCHAR},
+      </if>
+      <if test="userId != null">
+        #{userId,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerMessage != null">
+        #{buyerMessage,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerNick != null">
+        #{buyerNick,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerRate != null">
+        #{buyerRate,jdbcType=BIT},
+      </if>
+      <if test="receiverState != null">
+        #{receiverState,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverCity != null">
+        #{receiverCity,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverDistrict != null">
+        #{receiverDistrict,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverAddress != null">
+        #{receiverAddress,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverMobile != null">
+        #{receiverMobile,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverZip != null">
+        #{receiverZip,jdbcType=VARCHAR},
+      </if>
+      <if test="receiver != null">
+        #{receiver,jdbcType=VARCHAR},
+      </if>
+      <if test="invoiceType != null">
+        #{invoiceType,jdbcType=INTEGER},
+      </if>
+      <if test="sourceType != null">
+        #{sourceType,jdbcType=INTEGER},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbOrderExample" resultType="java.lang.Long">
+    select count(*) from tb_order
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_order
+    <set>
+      <if test="record.orderId != null">
+        order_id = #{record.orderId,jdbcType=BIGINT},
+      </if>
+      <if test="record.totalPay != null">
+        total_pay = #{record.totalPay,jdbcType=BIGINT},
+      </if>
+      <if test="record.actualPay != null">
+        actual_pay = #{record.actualPay,jdbcType=BIGINT},
+      </if>
+      <if test="record.promotionIds != null">
+        promotion_ids = #{record.promotionIds,jdbcType=VARCHAR},
+      </if>
+      <if test="record.paymentType != null">
+        payment_type = #{record.paymentType,jdbcType=BIT},
+      </if>
+      <if test="record.postFee != null">
+        post_fee = #{record.postFee,jdbcType=BIGINT},
+      </if>
+      <if test="record.createTime != null">
+        create_time = #{record.createTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.shippingName != null">
+        shipping_name = #{record.shippingName,jdbcType=VARCHAR},
+      </if>
+      <if test="record.shippingCode != null">
+        shipping_code = #{record.shippingCode,jdbcType=VARCHAR},
+      </if>
+      <if test="record.userId != null">
+        user_id = #{record.userId,jdbcType=VARCHAR},
+      </if>
+      <if test="record.buyerMessage != null">
+        buyer_message = #{record.buyerMessage,jdbcType=VARCHAR},
+      </if>
+      <if test="record.buyerNick != null">
+        buyer_nick = #{record.buyerNick,jdbcType=VARCHAR},
+      </if>
+      <if test="record.buyerRate != null">
+        buyer_rate = #{record.buyerRate,jdbcType=BIT},
+      </if>
+      <if test="record.receiverState != null">
+        receiver_state = #{record.receiverState,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiverCity != null">
+        receiver_city = #{record.receiverCity,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiverDistrict != null">
+        receiver_district = #{record.receiverDistrict,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiverAddress != null">
+        receiver_address = #{record.receiverAddress,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiverMobile != null">
+        receiver_mobile = #{record.receiverMobile,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiverZip != null">
+        receiver_zip = #{record.receiverZip,jdbcType=VARCHAR},
+      </if>
+      <if test="record.receiver != null">
+        receiver = #{record.receiver,jdbcType=VARCHAR},
+      </if>
+      <if test="record.invoiceType != null">
+        invoice_type = #{record.invoiceType,jdbcType=INTEGER},
+      </if>
+      <if test="record.sourceType != null">
+        source_type = #{record.sourceType,jdbcType=INTEGER},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_order
+    set order_id = #{record.orderId,jdbcType=BIGINT},
+      total_pay = #{record.totalPay,jdbcType=BIGINT},
+      actual_pay = #{record.actualPay,jdbcType=BIGINT},
+      promotion_ids = #{record.promotionIds,jdbcType=VARCHAR},
+      payment_type = #{record.paymentType,jdbcType=BIT},
+      post_fee = #{record.postFee,jdbcType=BIGINT},
+      create_time = #{record.createTime,jdbcType=TIMESTAMP},
+      shipping_name = #{record.shippingName,jdbcType=VARCHAR},
+      shipping_code = #{record.shippingCode,jdbcType=VARCHAR},
+      user_id = #{record.userId,jdbcType=VARCHAR},
+      buyer_message = #{record.buyerMessage,jdbcType=VARCHAR},
+      buyer_nick = #{record.buyerNick,jdbcType=VARCHAR},
+      buyer_rate = #{record.buyerRate,jdbcType=BIT},
+      receiver_state = #{record.receiverState,jdbcType=VARCHAR},
+      receiver_city = #{record.receiverCity,jdbcType=VARCHAR},
+      receiver_district = #{record.receiverDistrict,jdbcType=VARCHAR},
+      receiver_address = #{record.receiverAddress,jdbcType=VARCHAR},
+      receiver_mobile = #{record.receiverMobile,jdbcType=VARCHAR},
+      receiver_zip = #{record.receiverZip,jdbcType=VARCHAR},
+      receiver = #{record.receiver,jdbcType=VARCHAR},
+      invoice_type = #{record.invoiceType,jdbcType=INTEGER},
+      source_type = #{record.sourceType,jdbcType=INTEGER}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.leyou.po.TbOrder">
+    update tb_order
+    <set>
+      <if test="totalPay != null">
+        total_pay = #{totalPay,jdbcType=BIGINT},
+      </if>
+      <if test="actualPay != null">
+        actual_pay = #{actualPay,jdbcType=BIGINT},
+      </if>
+      <if test="promotionIds != null">
+        promotion_ids = #{promotionIds,jdbcType=VARCHAR},
+      </if>
+      <if test="paymentType != null">
+        payment_type = #{paymentType,jdbcType=BIT},
+      </if>
+      <if test="postFee != null">
+        post_fee = #{postFee,jdbcType=BIGINT},
+      </if>
+      <if test="createTime != null">
+        create_time = #{createTime,jdbcType=TIMESTAMP},
+      </if>
+      <if test="shippingName != null">
+        shipping_name = #{shippingName,jdbcType=VARCHAR},
+      </if>
+      <if test="shippingCode != null">
+        shipping_code = #{shippingCode,jdbcType=VARCHAR},
+      </if>
+      <if test="userId != null">
+        user_id = #{userId,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerMessage != null">
+        buyer_message = #{buyerMessage,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerNick != null">
+        buyer_nick = #{buyerNick,jdbcType=VARCHAR},
+      </if>
+      <if test="buyerRate != null">
+        buyer_rate = #{buyerRate,jdbcType=BIT},
+      </if>
+      <if test="receiverState != null">
+        receiver_state = #{receiverState,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverCity != null">
+        receiver_city = #{receiverCity,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverDistrict != null">
+        receiver_district = #{receiverDistrict,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverAddress != null">
+        receiver_address = #{receiverAddress,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverMobile != null">
+        receiver_mobile = #{receiverMobile,jdbcType=VARCHAR},
+      </if>
+      <if test="receiverZip != null">
+        receiver_zip = #{receiverZip,jdbcType=VARCHAR},
+      </if>
+      <if test="receiver != null">
+        receiver = #{receiver,jdbcType=VARCHAR},
+      </if>
+      <if test="invoiceType != null">
+        invoice_type = #{invoiceType,jdbcType=INTEGER},
+      </if>
+      <if test="sourceType != null">
+        source_type = #{sourceType,jdbcType=INTEGER},
+      </if>
+    </set>
+    where order_id = #{orderId,jdbcType=BIGINT}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.leyou.po.TbOrder">
+    update tb_order
+    set total_pay = #{totalPay,jdbcType=BIGINT},
+      actual_pay = #{actualPay,jdbcType=BIGINT},
+      promotion_ids = #{promotionIds,jdbcType=VARCHAR},
+      payment_type = #{paymentType,jdbcType=BIT},
+      post_fee = #{postFee,jdbcType=BIGINT},
+      create_time = #{createTime,jdbcType=TIMESTAMP},
+      shipping_name = #{shippingName,jdbcType=VARCHAR},
+      shipping_code = #{shippingCode,jdbcType=VARCHAR},
+      user_id = #{userId,jdbcType=VARCHAR},
+      buyer_message = #{buyerMessage,jdbcType=VARCHAR},
+      buyer_nick = #{buyerNick,jdbcType=VARCHAR},
+      buyer_rate = #{buyerRate,jdbcType=BIT},
+      receiver_state = #{receiverState,jdbcType=VARCHAR},
+      receiver_city = #{receiverCity,jdbcType=VARCHAR},
+      receiver_district = #{receiverDistrict,jdbcType=VARCHAR},
+      receiver_address = #{receiverAddress,jdbcType=VARCHAR},
+      receiver_mobile = #{receiverMobile,jdbcType=VARCHAR},
+      receiver_zip = #{receiverZip,jdbcType=VARCHAR},
+      receiver = #{receiver,jdbcType=VARCHAR},
+      invoice_type = #{invoiceType,jdbcType=INTEGER},
+      source_type = #{sourceType,jdbcType=INTEGER}
+    where order_id = #{orderId,jdbcType=BIGINT}
+  </update>
+</mapper>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetail.java	(date 1575720882623)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderDetail.java	(date 1575720882623)
@@ -0,0 +1,87 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+
+public class TbOrderDetail implements Serializable {
+    private Long id;
+
+    private Long orderId;
+
+    private Long skuId;
+
+    private Integer num;
+
+    private String title;
+
+    private String ownSpec;
+
+    private Long price;
+
+    private String image;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Long getOrderId() {
+        return orderId;
+    }
+
+    public void setOrderId(Long orderId) {
+        this.orderId = orderId;
+    }
+
+    public Long getSkuId() {
+        return skuId;
+    }
+
+    public void setSkuId(Long skuId) {
+        this.skuId = skuId;
+    }
+
+    public Integer getNum() {
+        return num;
+    }
+
+    public void setNum(Integer num) {
+        this.num = num;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getOwnSpec() {
+        return ownSpec;
+    }
+
+    public void setOwnSpec(String ownSpec) {
+        this.ownSpec = ownSpec;
+    }
+
+    public Long getPrice() {
+        return price;
+    }
+
+    public void setPrice(Long price) {
+        this.price = price;
+    }
+
+    public String getImage() {
+        return image;
+    }
+
+    public void setImage(String image) {
+        this.image = image;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbCoupon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbCoupon.java	(date 1575720882617)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbCoupon.java	(date 1575720882617)
@@ -0,0 +1,108 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+import java.util.Date;
+
+public class TbCoupon implements Serializable {
+    private Long id;
+
+    private String name;
+
+    private String type;
+
+    private Long condition;
+
+    private Long reduction;
+
+    private Integer discount;
+
+    private String targets;
+
+    private Integer stock;
+
+    private Date startTime;
+
+    private Date endTime;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public Long getCondition() {
+        return condition;
+    }
+
+    public void setCondition(Long condition) {
+        this.condition = condition;
+    }
+
+    public Long getReduction() {
+        return reduction;
+    }
+
+    public void setReduction(Long reduction) {
+        this.reduction = reduction;
+    }
+
+    public Integer getDiscount() {
+        return discount;
+    }
+
+    public void setDiscount(Integer discount) {
+        this.discount = discount;
+    }
+
+    public String getTargets() {
+        return targets;
+    }
+
+    public void setTargets(String targets) {
+        this.targets = targets;
+    }
+
+    public Integer getStock() {
+        return stock;
+    }
+
+    public void setStock(Integer stock) {
+        this.stock = stock;
+    }
+
+    public Date getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(Date startTime) {
+        this.startTime = startTime;
+    }
+
+    public Date getEndTime() {
+        return endTime;
+    }
+
+    public void setEndTime(Date endTime) {
+        this.endTime = endTime;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderExample.java	(date 1575720882619)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbOrderExample.java	(date 1575720882619)
@@ -0,0 +1,1651 @@
+package com.leyou.po;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+public class TbOrderExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    public TbOrderExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andOrderIdIsNull() {
+            addCriterion("order_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdIsNotNull() {
+            addCriterion("order_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdEqualTo(Long value) {
+            addCriterion("order_id =", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotEqualTo(Long value) {
+            addCriterion("order_id <>", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdGreaterThan(Long value) {
+            addCriterion("order_id >", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdGreaterThanOrEqualTo(Long value) {
+            addCriterion("order_id >=", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdLessThan(Long value) {
+            addCriterion("order_id <", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdLessThanOrEqualTo(Long value) {
+            addCriterion("order_id <=", value, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdIn(List<Long> values) {
+            addCriterion("order_id in", values, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotIn(List<Long> values) {
+            addCriterion("order_id not in", values, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdBetween(Long value1, Long value2) {
+            addCriterion("order_id between", value1, value2, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andOrderIdNotBetween(Long value1, Long value2) {
+            addCriterion("order_id not between", value1, value2, "orderId");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayIsNull() {
+            addCriterion("total_pay is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayIsNotNull() {
+            addCriterion("total_pay is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayEqualTo(Long value) {
+            addCriterion("total_pay =", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayNotEqualTo(Long value) {
+            addCriterion("total_pay <>", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayGreaterThan(Long value) {
+            addCriterion("total_pay >", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayGreaterThanOrEqualTo(Long value) {
+            addCriterion("total_pay >=", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayLessThan(Long value) {
+            addCriterion("total_pay <", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayLessThanOrEqualTo(Long value) {
+            addCriterion("total_pay <=", value, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayIn(List<Long> values) {
+            addCriterion("total_pay in", values, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayNotIn(List<Long> values) {
+            addCriterion("total_pay not in", values, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayBetween(Long value1, Long value2) {
+            addCriterion("total_pay between", value1, value2, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andTotalPayNotBetween(Long value1, Long value2) {
+            addCriterion("total_pay not between", value1, value2, "totalPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayIsNull() {
+            addCriterion("actual_pay is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayIsNotNull() {
+            addCriterion("actual_pay is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayEqualTo(Long value) {
+            addCriterion("actual_pay =", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayNotEqualTo(Long value) {
+            addCriterion("actual_pay <>", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayGreaterThan(Long value) {
+            addCriterion("actual_pay >", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayGreaterThanOrEqualTo(Long value) {
+            addCriterion("actual_pay >=", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayLessThan(Long value) {
+            addCriterion("actual_pay <", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayLessThanOrEqualTo(Long value) {
+            addCriterion("actual_pay <=", value, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayIn(List<Long> values) {
+            addCriterion("actual_pay in", values, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayNotIn(List<Long> values) {
+            addCriterion("actual_pay not in", values, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayBetween(Long value1, Long value2) {
+            addCriterion("actual_pay between", value1, value2, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andActualPayNotBetween(Long value1, Long value2) {
+            addCriterion("actual_pay not between", value1, value2, "actualPay");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsIsNull() {
+            addCriterion("promotion_ids is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsIsNotNull() {
+            addCriterion("promotion_ids is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsEqualTo(String value) {
+            addCriterion("promotion_ids =", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsNotEqualTo(String value) {
+            addCriterion("promotion_ids <>", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsGreaterThan(String value) {
+            addCriterion("promotion_ids >", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsGreaterThanOrEqualTo(String value) {
+            addCriterion("promotion_ids >=", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsLessThan(String value) {
+            addCriterion("promotion_ids <", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsLessThanOrEqualTo(String value) {
+            addCriterion("promotion_ids <=", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsLike(String value) {
+            addCriterion("promotion_ids like", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsNotLike(String value) {
+            addCriterion("promotion_ids not like", value, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsIn(List<String> values) {
+            addCriterion("promotion_ids in", values, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsNotIn(List<String> values) {
+            addCriterion("promotion_ids not in", values, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsBetween(String value1, String value2) {
+            addCriterion("promotion_ids between", value1, value2, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPromotionIdsNotBetween(String value1, String value2) {
+            addCriterion("promotion_ids not between", value1, value2, "promotionIds");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeIsNull() {
+            addCriterion("payment_type is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeIsNotNull() {
+            addCriterion("payment_type is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeEqualTo(Boolean value) {
+            addCriterion("payment_type =", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeNotEqualTo(Boolean value) {
+            addCriterion("payment_type <>", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeGreaterThan(Boolean value) {
+            addCriterion("payment_type >", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeGreaterThanOrEqualTo(Boolean value) {
+            addCriterion("payment_type >=", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeLessThan(Boolean value) {
+            addCriterion("payment_type <", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeLessThanOrEqualTo(Boolean value) {
+            addCriterion("payment_type <=", value, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeIn(List<Boolean> values) {
+            addCriterion("payment_type in", values, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeNotIn(List<Boolean> values) {
+            addCriterion("payment_type not in", values, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeBetween(Boolean value1, Boolean value2) {
+            addCriterion("payment_type between", value1, value2, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPaymentTypeNotBetween(Boolean value1, Boolean value2) {
+            addCriterion("payment_type not between", value1, value2, "paymentType");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeIsNull() {
+            addCriterion("post_fee is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeIsNotNull() {
+            addCriterion("post_fee is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeEqualTo(Long value) {
+            addCriterion("post_fee =", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeNotEqualTo(Long value) {
+            addCriterion("post_fee <>", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeGreaterThan(Long value) {
+            addCriterion("post_fee >", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeGreaterThanOrEqualTo(Long value) {
+            addCriterion("post_fee >=", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeLessThan(Long value) {
+            addCriterion("post_fee <", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeLessThanOrEqualTo(Long value) {
+            addCriterion("post_fee <=", value, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeIn(List<Long> values) {
+            addCriterion("post_fee in", values, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeNotIn(List<Long> values) {
+            addCriterion("post_fee not in", values, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeBetween(Long value1, Long value2) {
+            addCriterion("post_fee between", value1, value2, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andPostFeeNotBetween(Long value1, Long value2) {
+            addCriterion("post_fee not between", value1, value2, "postFee");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeIsNull() {
+            addCriterion("create_time is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeIsNotNull() {
+            addCriterion("create_time is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeEqualTo(Date value) {
+            addCriterion("create_time =", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeNotEqualTo(Date value) {
+            addCriterion("create_time <>", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeGreaterThan(Date value) {
+            addCriterion("create_time >", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
+            addCriterion("create_time >=", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeLessThan(Date value) {
+            addCriterion("create_time <", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
+            addCriterion("create_time <=", value, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeIn(List<Date> values) {
+            addCriterion("create_time in", values, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeNotIn(List<Date> values) {
+            addCriterion("create_time not in", values, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeBetween(Date value1, Date value2) {
+            addCriterion("create_time between", value1, value2, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
+            addCriterion("create_time not between", value1, value2, "createTime");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameIsNull() {
+            addCriterion("shipping_name is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameIsNotNull() {
+            addCriterion("shipping_name is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameEqualTo(String value) {
+            addCriterion("shipping_name =", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameNotEqualTo(String value) {
+            addCriterion("shipping_name <>", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameGreaterThan(String value) {
+            addCriterion("shipping_name >", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameGreaterThanOrEqualTo(String value) {
+            addCriterion("shipping_name >=", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameLessThan(String value) {
+            addCriterion("shipping_name <", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameLessThanOrEqualTo(String value) {
+            addCriterion("shipping_name <=", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameLike(String value) {
+            addCriterion("shipping_name like", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameNotLike(String value) {
+            addCriterion("shipping_name not like", value, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameIn(List<String> values) {
+            addCriterion("shipping_name in", values, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameNotIn(List<String> values) {
+            addCriterion("shipping_name not in", values, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameBetween(String value1, String value2) {
+            addCriterion("shipping_name between", value1, value2, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingNameNotBetween(String value1, String value2) {
+            addCriterion("shipping_name not between", value1, value2, "shippingName");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeIsNull() {
+            addCriterion("shipping_code is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeIsNotNull() {
+            addCriterion("shipping_code is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeEqualTo(String value) {
+            addCriterion("shipping_code =", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeNotEqualTo(String value) {
+            addCriterion("shipping_code <>", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeGreaterThan(String value) {
+            addCriterion("shipping_code >", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeGreaterThanOrEqualTo(String value) {
+            addCriterion("shipping_code >=", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeLessThan(String value) {
+            addCriterion("shipping_code <", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeLessThanOrEqualTo(String value) {
+            addCriterion("shipping_code <=", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeLike(String value) {
+            addCriterion("shipping_code like", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeNotLike(String value) {
+            addCriterion("shipping_code not like", value, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeIn(List<String> values) {
+            addCriterion("shipping_code in", values, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeNotIn(List<String> values) {
+            addCriterion("shipping_code not in", values, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeBetween(String value1, String value2) {
+            addCriterion("shipping_code between", value1, value2, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andShippingCodeNotBetween(String value1, String value2) {
+            addCriterion("shipping_code not between", value1, value2, "shippingCode");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdIsNull() {
+            addCriterion("user_id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdIsNotNull() {
+            addCriterion("user_id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdEqualTo(String value) {
+            addCriterion("user_id =", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdNotEqualTo(String value) {
+            addCriterion("user_id <>", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdGreaterThan(String value) {
+            addCriterion("user_id >", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdGreaterThanOrEqualTo(String value) {
+            addCriterion("user_id >=", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdLessThan(String value) {
+            addCriterion("user_id <", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdLessThanOrEqualTo(String value) {
+            addCriterion("user_id <=", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdLike(String value) {
+            addCriterion("user_id like", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdNotLike(String value) {
+            addCriterion("user_id not like", value, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdIn(List<String> values) {
+            addCriterion("user_id in", values, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdNotIn(List<String> values) {
+            addCriterion("user_id not in", values, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdBetween(String value1, String value2) {
+            addCriterion("user_id between", value1, value2, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andUserIdNotBetween(String value1, String value2) {
+            addCriterion("user_id not between", value1, value2, "userId");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageIsNull() {
+            addCriterion("buyer_message is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageIsNotNull() {
+            addCriterion("buyer_message is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageEqualTo(String value) {
+            addCriterion("buyer_message =", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageNotEqualTo(String value) {
+            addCriterion("buyer_message <>", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageGreaterThan(String value) {
+            addCriterion("buyer_message >", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageGreaterThanOrEqualTo(String value) {
+            addCriterion("buyer_message >=", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageLessThan(String value) {
+            addCriterion("buyer_message <", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageLessThanOrEqualTo(String value) {
+            addCriterion("buyer_message <=", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageLike(String value) {
+            addCriterion("buyer_message like", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageNotLike(String value) {
+            addCriterion("buyer_message not like", value, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageIn(List<String> values) {
+            addCriterion("buyer_message in", values, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageNotIn(List<String> values) {
+            addCriterion("buyer_message not in", values, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageBetween(String value1, String value2) {
+            addCriterion("buyer_message between", value1, value2, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerMessageNotBetween(String value1, String value2) {
+            addCriterion("buyer_message not between", value1, value2, "buyerMessage");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickIsNull() {
+            addCriterion("buyer_nick is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickIsNotNull() {
+            addCriterion("buyer_nick is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickEqualTo(String value) {
+            addCriterion("buyer_nick =", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickNotEqualTo(String value) {
+            addCriterion("buyer_nick <>", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickGreaterThan(String value) {
+            addCriterion("buyer_nick >", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickGreaterThanOrEqualTo(String value) {
+            addCriterion("buyer_nick >=", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickLessThan(String value) {
+            addCriterion("buyer_nick <", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickLessThanOrEqualTo(String value) {
+            addCriterion("buyer_nick <=", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickLike(String value) {
+            addCriterion("buyer_nick like", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickNotLike(String value) {
+            addCriterion("buyer_nick not like", value, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickIn(List<String> values) {
+            addCriterion("buyer_nick in", values, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickNotIn(List<String> values) {
+            addCriterion("buyer_nick not in", values, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickBetween(String value1, String value2) {
+            addCriterion("buyer_nick between", value1, value2, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerNickNotBetween(String value1, String value2) {
+            addCriterion("buyer_nick not between", value1, value2, "buyerNick");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateIsNull() {
+            addCriterion("buyer_rate is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateIsNotNull() {
+            addCriterion("buyer_rate is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateEqualTo(Boolean value) {
+            addCriterion("buyer_rate =", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateNotEqualTo(Boolean value) {
+            addCriterion("buyer_rate <>", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateGreaterThan(Boolean value) {
+            addCriterion("buyer_rate >", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateGreaterThanOrEqualTo(Boolean value) {
+            addCriterion("buyer_rate >=", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateLessThan(Boolean value) {
+            addCriterion("buyer_rate <", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateLessThanOrEqualTo(Boolean value) {
+            addCriterion("buyer_rate <=", value, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateIn(List<Boolean> values) {
+            addCriterion("buyer_rate in", values, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateNotIn(List<Boolean> values) {
+            addCriterion("buyer_rate not in", values, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateBetween(Boolean value1, Boolean value2) {
+            addCriterion("buyer_rate between", value1, value2, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andBuyerRateNotBetween(Boolean value1, Boolean value2) {
+            addCriterion("buyer_rate not between", value1, value2, "buyerRate");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateIsNull() {
+            addCriterion("receiver_state is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateIsNotNull() {
+            addCriterion("receiver_state is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateEqualTo(String value) {
+            addCriterion("receiver_state =", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateNotEqualTo(String value) {
+            addCriterion("receiver_state <>", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateGreaterThan(String value) {
+            addCriterion("receiver_state >", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_state >=", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateLessThan(String value) {
+            addCriterion("receiver_state <", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateLessThanOrEqualTo(String value) {
+            addCriterion("receiver_state <=", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateLike(String value) {
+            addCriterion("receiver_state like", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateNotLike(String value) {
+            addCriterion("receiver_state not like", value, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateIn(List<String> values) {
+            addCriterion("receiver_state in", values, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateNotIn(List<String> values) {
+            addCriterion("receiver_state not in", values, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateBetween(String value1, String value2) {
+            addCriterion("receiver_state between", value1, value2, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverStateNotBetween(String value1, String value2) {
+            addCriterion("receiver_state not between", value1, value2, "receiverState");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityIsNull() {
+            addCriterion("receiver_city is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityIsNotNull() {
+            addCriterion("receiver_city is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityEqualTo(String value) {
+            addCriterion("receiver_city =", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityNotEqualTo(String value) {
+            addCriterion("receiver_city <>", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityGreaterThan(String value) {
+            addCriterion("receiver_city >", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_city >=", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityLessThan(String value) {
+            addCriterion("receiver_city <", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityLessThanOrEqualTo(String value) {
+            addCriterion("receiver_city <=", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityLike(String value) {
+            addCriterion("receiver_city like", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityNotLike(String value) {
+            addCriterion("receiver_city not like", value, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityIn(List<String> values) {
+            addCriterion("receiver_city in", values, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityNotIn(List<String> values) {
+            addCriterion("receiver_city not in", values, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityBetween(String value1, String value2) {
+            addCriterion("receiver_city between", value1, value2, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverCityNotBetween(String value1, String value2) {
+            addCriterion("receiver_city not between", value1, value2, "receiverCity");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictIsNull() {
+            addCriterion("receiver_district is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictIsNotNull() {
+            addCriterion("receiver_district is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictEqualTo(String value) {
+            addCriterion("receiver_district =", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictNotEqualTo(String value) {
+            addCriterion("receiver_district <>", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictGreaterThan(String value) {
+            addCriterion("receiver_district >", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_district >=", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictLessThan(String value) {
+            addCriterion("receiver_district <", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictLessThanOrEqualTo(String value) {
+            addCriterion("receiver_district <=", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictLike(String value) {
+            addCriterion("receiver_district like", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictNotLike(String value) {
+            addCriterion("receiver_district not like", value, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictIn(List<String> values) {
+            addCriterion("receiver_district in", values, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictNotIn(List<String> values) {
+            addCriterion("receiver_district not in", values, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictBetween(String value1, String value2) {
+            addCriterion("receiver_district between", value1, value2, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverDistrictNotBetween(String value1, String value2) {
+            addCriterion("receiver_district not between", value1, value2, "receiverDistrict");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressIsNull() {
+            addCriterion("receiver_address is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressIsNotNull() {
+            addCriterion("receiver_address is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressEqualTo(String value) {
+            addCriterion("receiver_address =", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressNotEqualTo(String value) {
+            addCriterion("receiver_address <>", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressGreaterThan(String value) {
+            addCriterion("receiver_address >", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_address >=", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressLessThan(String value) {
+            addCriterion("receiver_address <", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressLessThanOrEqualTo(String value) {
+            addCriterion("receiver_address <=", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressLike(String value) {
+            addCriterion("receiver_address like", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressNotLike(String value) {
+            addCriterion("receiver_address not like", value, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressIn(List<String> values) {
+            addCriterion("receiver_address in", values, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressNotIn(List<String> values) {
+            addCriterion("receiver_address not in", values, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressBetween(String value1, String value2) {
+            addCriterion("receiver_address between", value1, value2, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverAddressNotBetween(String value1, String value2) {
+            addCriterion("receiver_address not between", value1, value2, "receiverAddress");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileIsNull() {
+            addCriterion("receiver_mobile is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileIsNotNull() {
+            addCriterion("receiver_mobile is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileEqualTo(String value) {
+            addCriterion("receiver_mobile =", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileNotEqualTo(String value) {
+            addCriterion("receiver_mobile <>", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileGreaterThan(String value) {
+            addCriterion("receiver_mobile >", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_mobile >=", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileLessThan(String value) {
+            addCriterion("receiver_mobile <", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileLessThanOrEqualTo(String value) {
+            addCriterion("receiver_mobile <=", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileLike(String value) {
+            addCriterion("receiver_mobile like", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileNotLike(String value) {
+            addCriterion("receiver_mobile not like", value, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileIn(List<String> values) {
+            addCriterion("receiver_mobile in", values, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileNotIn(List<String> values) {
+            addCriterion("receiver_mobile not in", values, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileBetween(String value1, String value2) {
+            addCriterion("receiver_mobile between", value1, value2, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverMobileNotBetween(String value1, String value2) {
+            addCriterion("receiver_mobile not between", value1, value2, "receiverMobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipIsNull() {
+            addCriterion("receiver_zip is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipIsNotNull() {
+            addCriterion("receiver_zip is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipEqualTo(String value) {
+            addCriterion("receiver_zip =", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipNotEqualTo(String value) {
+            addCriterion("receiver_zip <>", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipGreaterThan(String value) {
+            addCriterion("receiver_zip >", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver_zip >=", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipLessThan(String value) {
+            addCriterion("receiver_zip <", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipLessThanOrEqualTo(String value) {
+            addCriterion("receiver_zip <=", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipLike(String value) {
+            addCriterion("receiver_zip like", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipNotLike(String value) {
+            addCriterion("receiver_zip not like", value, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipIn(List<String> values) {
+            addCriterion("receiver_zip in", values, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipNotIn(List<String> values) {
+            addCriterion("receiver_zip not in", values, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipBetween(String value1, String value2) {
+            addCriterion("receiver_zip between", value1, value2, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverZipNotBetween(String value1, String value2) {
+            addCriterion("receiver_zip not between", value1, value2, "receiverZip");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverIsNull() {
+            addCriterion("receiver is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverIsNotNull() {
+            addCriterion("receiver is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverEqualTo(String value) {
+            addCriterion("receiver =", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverNotEqualTo(String value) {
+            addCriterion("receiver <>", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverGreaterThan(String value) {
+            addCriterion("receiver >", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverGreaterThanOrEqualTo(String value) {
+            addCriterion("receiver >=", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverLessThan(String value) {
+            addCriterion("receiver <", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverLessThanOrEqualTo(String value) {
+            addCriterion("receiver <=", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverLike(String value) {
+            addCriterion("receiver like", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverNotLike(String value) {
+            addCriterion("receiver not like", value, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverIn(List<String> values) {
+            addCriterion("receiver in", values, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverNotIn(List<String> values) {
+            addCriterion("receiver not in", values, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverBetween(String value1, String value2) {
+            addCriterion("receiver between", value1, value2, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andReceiverNotBetween(String value1, String value2) {
+            addCriterion("receiver not between", value1, value2, "receiver");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeIsNull() {
+            addCriterion("invoice_type is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeIsNotNull() {
+            addCriterion("invoice_type is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeEqualTo(Integer value) {
+            addCriterion("invoice_type =", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeNotEqualTo(Integer value) {
+            addCriterion("invoice_type <>", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeGreaterThan(Integer value) {
+            addCriterion("invoice_type >", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeGreaterThanOrEqualTo(Integer value) {
+            addCriterion("invoice_type >=", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeLessThan(Integer value) {
+            addCriterion("invoice_type <", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeLessThanOrEqualTo(Integer value) {
+            addCriterion("invoice_type <=", value, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeIn(List<Integer> values) {
+            addCriterion("invoice_type in", values, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeNotIn(List<Integer> values) {
+            addCriterion("invoice_type not in", values, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeBetween(Integer value1, Integer value2) {
+            addCriterion("invoice_type between", value1, value2, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andInvoiceTypeNotBetween(Integer value1, Integer value2) {
+            addCriterion("invoice_type not between", value1, value2, "invoiceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeIsNull() {
+            addCriterion("source_type is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeIsNotNull() {
+            addCriterion("source_type is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeEqualTo(Integer value) {
+            addCriterion("source_type =", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeNotEqualTo(Integer value) {
+            addCriterion("source_type <>", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeGreaterThan(Integer value) {
+            addCriterion("source_type >", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeGreaterThanOrEqualTo(Integer value) {
+            addCriterion("source_type >=", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeLessThan(Integer value) {
+            addCriterion("source_type <", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeLessThanOrEqualTo(Integer value) {
+            addCriterion("source_type <=", value, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeIn(List<Integer> values) {
+            addCriterion("source_type in", values, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeNotIn(List<Integer> values) {
+            addCriterion("source_type not in", values, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeBetween(Integer value1, Integer value2) {
+            addCriterion("source_type between", value1, value2, "sourceType");
+            return (Criteria) this;
+        }
+
+        public Criteria andSourceTypeNotBetween(Integer value1, Integer value2) {
+            addCriterion("source_type not between", value1, value2, "sourceType");
+            return (Criteria) this;
+        }
+    }
+
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrand.java	(date 1575720882605)
+++ ly-item/ly-item-service/src/main/java/com/leyou/po/TbBrand.java	(date 1575720882605)
@@ -0,0 +1,47 @@
+package com.leyou.po;
+
+import java.io.Serializable;
+
+public class TbBrand implements Serializable {
+    private Long id;
+
+    private String name;
+
+    private String image;
+
+    private String letter;
+
+    private static final long serialVersionUID = 1L;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getImage() {
+        return image;
+    }
+
+    public void setImage(String image) {
+        this.image = image;
+    }
+
+    public String getLetter() {
+        return letter;
+    }
+
+    public void setLetter(String letter) {
+        this.letter = letter;
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/test/java/GenMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/test/java/GenMain.java	(date 1575715072872)
+++ ly-item/ly-item-service/src/test/java/GenMain.java	(date 1575715072872)
@@ -0,0 +1,55 @@
+import org.mybatis.generator.api.MyBatisGenerator;
+import org.mybatis.generator.config.Configuration;
+import org.mybatis.generator.config.xml.ConfigurationParser;
+import org.mybatis.generator.exception.InvalidConfigurationException;
+import org.mybatis.generator.exception.XMLParserException;
+import org.mybatis.generator.internal.DefaultShellCallback;
+import org.springframework.util.ResourceUtils;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+
+/**************************************
+ * 类说明:
+ *     mybatis逆向工程main函数
+ ***************************************
+ */
+public class GenMain {
+    public static void main(String[] args) throws FileNotFoundException {
+        List<String> warnings = new ArrayList<String>();
+        boolean overwrite = true;
+        //如果这里出现空指针，直接写绝对路径即可。<br><br>　　　　//这个地方是一个非常大的重点  你的逆向工程的配置文件的地址 为了确定可以写成绝对的 具体的 就是点击配置文件 右击最后一个就看见了 ctrl  c+v 大法来完成<br>
+        String genCfg = "D:\\leyou\\ly-item\\ly-item-service\\src\\main\\resources\\generator\\generatorConfig.xml";
+        //String genCfg ="generator/generatorConfig.xml";
+        File configFile = ResourceUtils.getFile(genCfg);
+        ConfigurationParser cp = new ConfigurationParser(warnings);
+        Configuration config = null;
+        try {
+            config = cp.parseConfiguration(configFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (XMLParserException e) {
+            e.printStackTrace();
+        }
+        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
+        MyBatisGenerator myBatisGenerator = null;
+        try {
+            myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
+        } catch (InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+        try {
+            myBatisGenerator.generate(null);
+        } catch (SQLException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/controller/MongoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/controller/MongoController.java	(date 1575286945729)
+++ ly-item/ly-item-service/src/main/java/com/leyou/controller/MongoController.java	(date 1575286945729)
@@ -0,0 +1,23 @@
+package com.leyou.controller;
+
+import com.leyou.domain.Namespace;
+import com.leyou.service.MongoService;
+import com.leyou.vo.BaseRep;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/test")
+public class MongoController {
+
+    @Autowired
+    public MongoService mongoService;
+    @RequestMapping("/add")
+    public BaseRep add(@RequestBody Namespace namespace) {
+        BaseRep baseRep = mongoService.addNamespace(namespace);
+        return baseRep;
+    }
+}
Index: ly-item/ly-item-service/src/test/java/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/test/java/Test.java	(date 1575287648650)
+++ ly-item/ly-item-service/src/test/java/Test.java	(date 1575287648650)
@@ -0,0 +1,15 @@
+import com.mongodb.MongoClient;
+import com.mongodb.client.MongoDatabase;
+import org.junit.runner.RunWith;
+
+public class Test {
+
+    @org.junit.Test
+    public void  test1(){
+        MongoClient mongoClient = new MongoClient( "localhost" , 27017 );
+
+        // 连接到数据库
+        MongoDatabase mongoDatabase = mongoClient.getDatabase("mycol");
+        System.out.println("Connect to database successfully");
+    }
+}
Index: ly-common/src/main/java/com/leyou/common/utils/IdWorker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-common/src/main/java/com/leyou/common/utils/IdWorker.java	(date 1571760782757)
+++ ly-common/src/main/java/com/leyou/common/utils/IdWorker.java	(date 1571760782757)
@@ -0,0 +1,163 @@
+package com.leyou.common.utils;
+
+import java.lang.management.ManagementFactory;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+
+/**
+ * <p>名称：IdWorker.java</p>
+ * <p>描述：分布式自增长ID</p>
+ * <pre>
+ *     Twitter的 Snowflake　JAVA实现方案
+ * </pre>
+ * 核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：
+ * 1||0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000
+ * 在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，
+ * 然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），
+ * 然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。
+ * 这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），
+ * 并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。
+ * <p>
+ * 64位ID (42(毫秒)+5(机器ID)+5(业务编码)+12(重复累加))
+ *
+ * @author Polim
+ */
+public class IdWorker {
+    // 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）
+    private final static long twepoch = 1288834974657L;
+    // 机器标识位数
+    private final static long workerIdBits = 5L;
+    // 数据中心标识位数
+    private final static long datacenterIdBits = 5L;
+    // 机器ID最大值
+    private final static long maxWorkerId = -1L ^ (-1L << workerIdBits);
+    // 数据中心ID最大值
+    private final static long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);
+    // 毫秒内自增位
+    private final static long sequenceBits = 12L;
+    // 机器ID偏左移12位
+    private final static long workerIdShift = sequenceBits;
+    // 数据中心ID左移17位
+    private final static long datacenterIdShift = sequenceBits + workerIdBits;
+    // 时间毫秒左移22位
+    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;
+
+    private final static long sequenceMask = -1L ^ (-1L << sequenceBits);
+    /* 上次生产id时间戳 */
+    private static long lastTimestamp = -1L;
+    // 0，并发控制
+    private long sequence = 0L;
+
+    private final long workerId;
+    // 数据标识id部分
+    private final long datacenterId;
+
+    public IdWorker(){
+        this.datacenterId = getDatacenterId(maxDatacenterId);
+        this.workerId = getMaxWorkerId(datacenterId, maxWorkerId);
+    }
+    /**
+     * @param workerId
+     *            工作机器ID
+     * @param datacenterId
+     *            序列号
+     */
+    public IdWorker(long workerId, long datacenterId) {
+        if (workerId > maxWorkerId || workerId < 0) {
+            throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
+        }
+        if (datacenterId > maxDatacenterId || datacenterId < 0) {
+            throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
+        }
+        this.workerId = workerId;
+        this.datacenterId = datacenterId;
+    }
+    /**
+     * 获取下一个ID
+     *
+     * @return
+     */
+    public synchronized long nextId() {
+        long timestamp = timeGen();
+        if (timestamp < lastTimestamp) {
+            throw new RuntimeException(String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
+        }
+
+        if (lastTimestamp == timestamp) {
+            // 当前毫秒内，则+1
+            sequence = (sequence + 1) & sequenceMask;
+            if (sequence == 0) {
+                // 当前毫秒内计数满了，则等待下一秒
+                timestamp = tilNextMillis(lastTimestamp);
+            }
+        } else {
+            sequence = 0L;
+        }
+        lastTimestamp = timestamp;
+        // ID偏移组合生成最终的ID，并返回ID
+        long nextId = ((timestamp - twepoch) << timestampLeftShift)
+                | (datacenterId << datacenterIdShift)
+                | (workerId << workerIdShift) | sequence;
+
+        return nextId;
+    }
+
+    private long tilNextMillis(final long lastTimestamp) {
+        long timestamp = this.timeGen();
+        while (timestamp <= lastTimestamp) {
+            timestamp = this.timeGen();
+        }
+        return timestamp;
+    }
+
+    private long timeGen() {
+        return System.currentTimeMillis();
+    }
+
+    /**
+     * <p>
+     * 获取 maxWorkerId
+     * </p>
+     */
+    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {
+        StringBuffer mpid = new StringBuffer();
+        mpid.append(datacenterId);
+        String name = ManagementFactory.getRuntimeMXBean().getName();
+        if (!name.isEmpty()) {
+         /*
+          * GET jvmPid
+          */
+            mpid.append(name.split("@")[0]);
+        }
+      /*
+       * MAC + PID 的 hashcode 获取16个低位
+       */
+        return (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);
+    }
+
+    /**
+     * <p>
+     * 数据标识id部分
+     * </p>
+     */
+    protected static long getDatacenterId(long maxDatacenterId) {
+        long id = 0L;
+        try {
+            InetAddress ip = InetAddress.getLocalHost();
+            NetworkInterface network = NetworkInterface.getByInetAddress(ip);
+            if (network == null) {
+                id = 1L;
+            } else {
+                byte[] mac = network.getHardwareAddress();
+                id = ((0x000000FF & (long) mac[mac.length - 1])
+                        | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;
+                id = id % (maxDatacenterId + 1);
+            }
+        } catch (Exception e) {
+            System.out.println(" getDatacenterId: " + e.getMessage());
+        }
+        return id;
+    }
+
+
+}
\ No newline at end of file
Index: ly-common/src/main/java/com/leyou/common/utils/JsonUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-common/src/main/java/com/leyou/common/utils/JsonUtils.java	(date 1574043995494)
+++ ly-common/src/main/java/com/leyou/common/utils/JsonUtils.java	(date 1574043995494)
@@ -0,0 +1,78 @@
+package com.leyou.common.utils;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+//import org.springframework.lang.Nullable;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * @author: HuYi.Zhang
+ * @create: 2018-04-24 17:20
+ **/
+public class JsonUtils {
+
+    public static final ObjectMapper mapper = new ObjectMapper();
+
+    private static final Logger logger = LoggerFactory.getLogger(JsonUtils.class);
+
+    public static String serialize(Object obj) {
+        if (obj == null) {
+            return null;
+        }
+        if (obj.getClass() == String.class) {
+            return (String) obj;
+        }
+        try {
+            return mapper.writeValueAsString(obj);
+        } catch (JsonProcessingException e) {
+            logger.error("json序列化出错：" + obj, e);
+            return null;
+        }
+    }
+
+    //    @Nullable
+    public static <T> T parse(String json, Class<T> tClass) {
+        try {
+            return mapper.readValue(json, tClass);
+        } catch (IOException e) {
+            logger.error("json解析出错：" + json, e);
+            return null;
+        }
+    }
+
+    //    @Nullable
+    public static <E> List<E> parseList(String json, Class<E> eClass) {
+        try {
+            return mapper.readValue(json, mapper.getTypeFactory().constructCollectionType(List.class, eClass));
+        } catch (IOException e) {
+            logger.error("json解析出错：" + json, e);
+            return null;
+        }
+    }
+
+    //    @Nullable
+    public static <K, V> Map<K, V> parseMap(String json, Class<K> kClass, Class<V> vClass) {
+        try {
+            return mapper.readValue(json, mapper.getTypeFactory().constructMapType(Map.class, kClass, vClass));
+        } catch (IOException e) {
+            logger.error("json解析出错：" + json, e);
+            return null;
+        }
+    }
+
+//    @Nullable
+    public static <T> T nativeRead(String json, TypeReference<T> type) {
+        try {
+            return mapper.readValue(json, type);
+        } catch (IOException e) {
+            logger.error("json解析出错：" + json, e);
+            return null;
+        }
+    }
+}
Index: ly-item/ly-item-service/src/main/java/com/leyou/demo/GenMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/demo/GenMain.java	(date 1575715328905)
+++ ly-item/ly-item-service/src/main/java/com/leyou/demo/GenMain.java	(date 1575715328905)
@@ -0,0 +1,57 @@
+package com.leyou.demo;
+
+import org.mybatis.generator.api.MyBatisGenerator;
+import org.mybatis.generator.config.Configuration;
+import org.mybatis.generator.config.xml.ConfigurationParser;
+import org.mybatis.generator.exception.InvalidConfigurationException;
+import org.mybatis.generator.exception.XMLParserException;
+import org.mybatis.generator.internal.DefaultShellCallback;
+import org.springframework.util.ResourceUtils;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+
+/**************************************
+ * 类说明:
+ *     mybatis逆向工程main函数
+ ***************************************
+ */
+public class GenMain {
+    public static void main(String[] args) throws FileNotFoundException {
+        List<String> warnings = new ArrayList<String>();
+        boolean overwrite = true;
+        //如果这里出现空指针，直接写绝对路径即可。<br><br>　　　　//这个地方是一个非常大的重点  你的逆向工程的配置文件的地址 为了确定可以写成绝对的 具体的 就是点击配置文件 右击最后一个就看见了 ctrl  c+v 大法来完成<br>
+        String genCfg = "D:\\leyou\\ly-item\\ly-item-service\\src\\main\\resources\\generator\\generatorConfig.xml";
+        //String genCfg ="generator/generatorConfig.xml";
+        File configFile = ResourceUtils.getFile(genCfg);
+        ConfigurationParser cp = new ConfigurationParser(warnings);
+        Configuration config = null;
+        try {
+            config = cp.parseConfiguration(configFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (XMLParserException e) {
+            e.printStackTrace();
+        }
+        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
+        MyBatisGenerator myBatisGenerator = null;
+        try {
+            myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
+        } catch (InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+        try {
+            myBatisGenerator.generate(null);
+        } catch (SQLException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/generator/generatorConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/generator/generatorConfig.xml	(date 1575720872159)
+++ ly-item/ly-item-service/src/main/resources/generator/generatorConfig.xml	(date 1575720872159)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE generatorConfiguration
+        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
+        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
+
+<generatorConfiguration>
+    <!--   <classPathEntry location="E:/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar" /> -->
+    <!--   <properties resource="properties/development.properties"/> -->
+    <!--<properties resource="generator/config.properties"/>-->
+
+    <!-- 数据库连接配置文件 -->
+<!--    <properties resource="application.yml" />-->
+
+    <context id="Mysql" targetRuntime="MyBatis3">
+        <property name="beginningDelimiter" value="`"/>
+        <property name="endingDelimiter" value="`"/>
+        <!-- 生成的pojo，将implements Serializable-->
+        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
+        <commentGenerator>
+            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
+            <property name="suppressAllComments" value="true" />
+        </commentGenerator>
+
+        <!-- 数据库链接URL、用户名、密码（这个就是你的spring boot项目自带的那个配置文件里面的数据库的配置） -->
+        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
+                        connectionURL="jdbc:mysql://localhost:3306/yun6?serverTimezone=UTC"
+                        userId="root"
+                        password="root">
+        </jdbcConnection>
+        <!--
+            生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，
+            也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下<br>　　　　　　　（通俗的讲就是你想要把生成的实体类的放到哪里）
+        -->
+        <javaModelGenerator targetPackage="com.leyou.po" targetProject="src/main/java"/>
+        <!--对应的mapper.xml文件（通俗的讲就是你要把mapper.xml文件放到什么地方去，我是放到resource下一个名叫mappers的文件夹里面了）  -->
+        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>
+        <!-- 对应的Mapper接口类文件 （通俗的讲就是你要生成的稻城mapper接口的地方 需要根据自己的文件进行配置） -->
+        <javaClientGenerator targetPackage="com.leyou.mapper" targetProject="src/main/java"
+                             type="XMLMAPPER"/>
+
+        <!--对应的表-->
+
+        <table tableName="tb_brand">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+        <table tableName="tb_category">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+        <table tableName="tb_category_brand">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+        <table tableName="tb_coupon">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+        <table tableName="tb_order">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+        <table tableName="tb_order_detail">
+            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
+        </table>
+    </context>
+
+</generatorConfiguration>
+
+
Index: ly-common/src/main/java/com/leyou/common/utils/CookieUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-common/src/main/java/com/leyou/common/utils/CookieUtils.java	(date 1571761510316)
+++ ly-common/src/main/java/com/leyou/common/utils/CookieUtils.java	(date 1571761510316)
@@ -0,0 +1,217 @@
+package com.leyou.common.utils;
+
+import lombok.extern.slf4j.Slf4j;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.UnsupportedEncodingException;
+import java.net.URLDecoder;
+import java.net.URLEncoder;
+
+/**
+ * 
+ * Cookie 工具类
+ *
+ */
+
+public final class CookieUtils {
+
+	protected static final Logger logger = LoggerFactory.getLogger(CookieUtils.class);
+
+	/**
+	 * 得到Cookie的值, 不编码
+	 * 
+	 * @param request
+	 * @param cookieName
+	 * @return
+	 */
+	public static String getCookieValue(HttpServletRequest request, String cookieName) {
+		return getCookieValue(request, cookieName, false);
+	}
+
+	/**
+	 * 得到Cookie的值,
+	 * 
+	 * @param request
+	 * @param cookieName
+	 * @return
+	 */
+	public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) {
+		Cookie[] cookieList = request.getCookies();
+		if (cookieList == null || cookieName == null){
+			return null;			
+		}
+		String retValue = null;
+		try {
+			for (int i = 0; i < cookieList.length; i++) {
+				if (cookieList[i].getName().equals(cookieName)) {
+					if (isDecoder) {
+						retValue = URLDecoder.decode(cookieList[i].getValue(), "UTF-8");
+					} else {
+						retValue = cookieList[i].getValue();
+					}
+					break;
+				}
+			}
+		} catch (UnsupportedEncodingException e) {
+			logger.error("Cookie Decode Error.", e);
+		}
+		return retValue;
+	}
+
+	/**
+	 * 得到Cookie的值,
+	 * 
+	 * @param request
+	 * @param cookieName
+	 * @return
+	 */
+	public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) {
+		Cookie[] cookieList = request.getCookies();
+		if (cookieList == null || cookieName == null){
+			return null;			
+		}
+		String retValue = null;
+		try {
+			for (int i = 0; i < cookieList.length; i++) {
+				if (cookieList[i].getName().equals(cookieName)) {
+					retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);
+					break;
+				}
+			}
+		} catch (UnsupportedEncodingException e) {
+			logger.error("Cookie Decode Error.", e);
+		}
+		return retValue;
+	}
+
+	/**
+	 * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码
+	 */
+	public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue) {
+		setCookie(request, response, cookieName, cookieValue, -1);
+	}
+
+	/**
+	 * 设置Cookie的值 在指定时间内生效,但不编码
+	 */
+	public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, int cookieMaxage) {
+		setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);
+	}
+
+	/**
+	 * 设置Cookie的值 不设置生效时间,但编码
+	 */
+	public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, boolean isEncode) {
+		setCookie(request, response, cookieName, cookieValue, -1, isEncode);
+	}
+
+	/**
+	 * 设置Cookie的值 在指定时间内生效, 编码参数
+	 */
+	public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) {
+		doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);
+	}
+
+	/**
+	 * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)
+	 */
+	public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, int cookieMaxage, String encodeString) {
+		doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);
+	}
+
+	/**
+	 * 删除Cookie带cookie域名
+	 */
+	public static void deleteCookie(HttpServletRequest request, HttpServletResponse response, String cookieName) {
+		doSetCookie(request, response, cookieName, "", -1, false);
+	}
+
+	/**
+	 * 设置Cookie的值，并使其在指定时间内生效
+	 * 
+	 * @param cookieMaxage
+	 *            cookie生效的最大秒数
+	 */
+	private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) {
+		try {
+			if (cookieValue == null) {
+				cookieValue = "";
+			} else if (isEncode) {
+				cookieValue = URLEncoder.encode(cookieValue, "utf-8");
+			}
+			Cookie cookie = new Cookie(cookieName, cookieValue);
+			if (cookieMaxage > 0)
+				cookie.setMaxAge(cookieMaxage);
+			if (null != request)// 设置域名的cookie
+				cookie.setDomain(getDomainName(request));
+			cookie.setPath("/");
+			response.addCookie(cookie);
+		} catch (Exception e) {
+			logger.error("Cookie Encode Error.", e);
+		}
+	}
+
+	/**
+	 * 设置Cookie的值，并使其在指定时间内生效
+	 * 
+	 * @param cookieMaxage
+	 *            cookie生效的最大秒数
+	 */
+	private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response, String cookieName, String cookieValue, int cookieMaxage, String encodeString) {
+		try {
+			if (cookieValue == null) {
+				cookieValue = "";
+			} else {
+				cookieValue = URLEncoder.encode(cookieValue, encodeString);
+			}
+			Cookie cookie = new Cookie(cookieName, cookieValue);
+			if (cookieMaxage > 0)
+				cookie.setMaxAge(cookieMaxage);
+			if (null != request)// 设置域名的cookie
+				cookie.setDomain(getDomainName(request));
+			cookie.setPath("/");
+			response.addCookie(cookie);
+		} catch (Exception e) {
+			logger.error("Cookie Encode Error.", e);
+		}
+	}
+
+	/**
+	 * 得到cookie的域名
+	 */
+	private static final String getDomainName(HttpServletRequest request) {
+		String domainName = null;
+
+		String serverName = request.getRequestURL().toString();
+		if (serverName == null || serverName.equals("")) {
+			domainName = "";
+		} else {
+			serverName = serverName.toLowerCase();
+			serverName = serverName.substring(7);
+			final int end = serverName.indexOf("/");
+			serverName = serverName.substring(0, end);
+			final String[] domains = serverName.split("\\.");
+			int len = domains.length;
+			if (len > 3) {
+				// www.xxx.com.cn
+				domainName = domains[len - 3] + "." + domains[len - 2] + "." + domains[len - 1];
+			} else if (len <= 3 && len > 1) {
+				// xxx.com or xxx.cn
+				domainName = domains[len - 2] + "." + domains[len - 1];
+			} else {
+				domainName = serverName;
+			}
+		}
+
+		if (domainName != null && domainName.indexOf(":") > 0) {
+			String[] ary = domainName.split("\\:");
+			domainName = ary[0];
+		}
+		return domainName;
+	}
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ pom.xml	(date 1575280705342)
@@ -10,6 +10,8 @@
     <modules>
         <module>ly-registry</module>
         <module>ly-gateway</module>
+        <module>ly-item</module>
+        <module>ly-common</module>
     </modules>
     <packaging>pom</packaging>
 
@@ -29,6 +31,7 @@
         <pageHelper.starter.version>1.2.5</pageHelper.starter.version>
         <leyou.latest.version>1.0.0-SNAPSHOT</leyou.latest.version>
         <fastDFS.client.version>1.26.1-RELEASE</fastDFS.client.version>
+        <mybatis.starter.version>1.3.1</mybatis.starter.version>
     </properties>
 
     <dependencyManagement>
@@ -65,11 +68,11 @@
                 <version>${mysql.version}</version>
             </dependency>
             <!--   fastdfs             -->
-            <dependency>
-                <groupId>com.github.tobato</groupId>
-                <artifactId>fastdfs-client</artifactId>
-                <version>${fastDFS.client.version}</version>
-            </dependency>
+<!--            <dependency>-->
+<!--                <groupId>com.github.tobato</groupId>-->
+<!--                <artifactId>fastdfs-client</artifactId>-->
+<!--                <version>${fastDFS.client.version}</version>-->
+<!--            </dependency>-->
         </dependencies>
     </dependencyManagement>
     <dependencies>
Index: ly-item/ly-item-service/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/application.yml	(date 1575716411631)
+++ ly-item/ly-item-service/src/main/resources/application.yml	(date 1575716411631)
@@ -0,0 +1,19 @@
+server:
+  port: 8081
+spring:
+  application:
+    name: item-service
+  datasource:
+    url: jdbc:mysql://localhost:3306/yun6
+    username: root
+    password: root
+    driver-class-name: com.mysql.jdbc.Driver
+  mongodb:
+    uri: mongodb://root:123456@127.0.0.1:27017/tes_namespace
+eureka:
+  client:
+    service-url:
+      defaultZone: http://127.0.0.1:10086/eureka
+  instance:
+    prefer-ip-address: true
+    ip-address: 127.0.0.1
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/service/MongoService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/service/MongoService.java	(date 1575285649527)
+++ ly-item/ly-item-service/src/main/java/com/leyou/service/MongoService.java	(date 1575285649527)
@@ -0,0 +1,76 @@
+package com.leyou.service;
+
+import com.leyou.domain.Namespace;
+import com.leyou.vo.BaseRep;
+import org.apache.commons.lang3.StringUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Sort;
+import org.springframework.data.mongodb.core.MongoTemplate;
+import org.springframework.data.mongodb.core.query.Criteria;
+import org.springframework.data.mongodb.core.query.Query;
+import org.springframework.data.mongodb.core.query.Update;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class MongoService {
+    @Autowired
+    public MongoTemplate mongoTemplate;
+
+    public BaseRep addNamespace(Namespace namespace) {
+        BaseRep baseRep = new BaseRep();
+        mongoTemplate.save(namespace);
+        baseRep.setCode("1");
+        baseRep.setMessage("保存成功");
+        return baseRep;
+    }
+
+
+    public List<Namespace> queryNamespace(String name, String code, Integer offset, Integer limit) {
+        Query query = new Query();
+        if (StringUtils.isNotEmpty(name)) {
+            query.addCriteria(Criteria.where("name").is(name));
+        }
+        if (StringUtils.isNotEmpty(code)) {
+            query.addCriteria(Criteria.where("code").is(code));
+        }
+        query.with(new Sort(new Sort.Order(Sort.Direction.DESC, "creatTime")));
+        int skip = (offset - 1) * limit;
+        query.skip(skip);// 从那条记录开始
+        query.limit(limit);// 取多少条记录
+        List<Namespace> list = mongoTemplate.find(query, Namespace.class);
+        return list;
+
+    }
+
+    /*public int updateNamespace(Namespace namespace) {
+        Query query = new Query();
+        query.addCriteria(Criteria.where("id").is(namespace.getId()));
+        Update update = new Update();
+        if (StringUtils.isNotEmpty(namespace.getName())) {
+            update.set("name", namespace.getName());
+        }
+        if (StringUtils.isNotEmpty(namespace.getCode())) {
+            update.set("code", namespace.getCode());
+        }
+        if (StringUtils.isNotEmpty(namespace.getDescription())) {
+            update.set("description", namespace.getCode());
+        }
+        mongoTemplate.updateFirst(query, update, Namespace.class);
+        return 1;
+    }*/
+    public int delNamespace(String id) {
+        Query query = new Query(Criteria.where("id").is(id));
+        mongoTemplate.remove(query, Namespace.class);
+        return 1;
+    }
+
+
+    public Namespace queryNamespaceById(String id) {
+        Query query = new Query();
+        query.addCriteria(Criteria.where("id").is(id));
+        Namespace namespace = mongoTemplate.findOne(query, Namespace.class);
+        return namespace;
+    }
+}
Index: ly-common/src/main/java/com/leyou/common/utils/NumberUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-common/src/main/java/com/leyou/common/utils/NumberUtils.java	(date 1571760781103)
+++ ly-common/src/main/java/com/leyou/common/utils/NumberUtils.java	(date 1571760781103)
@@ -0,0 +1,70 @@
+package com.leyou.common.utils;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.regex.MatchResult;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * @author: HuYi.Zhang
+ * @create: 2018-04-25 09:13
+ **/
+public class NumberUtils {
+
+    public static boolean isInt(Double num) {
+        return num.intValue() == num;
+    }
+
+    /**
+     * 判断字符串是否是数值格式
+     * @param str
+     * @return
+     */
+    public static boolean isDigit(String str){
+        if(str == null || str.trim().equals("")){
+            return false;
+        }
+        return str.matches("^\\d+$");
+    }
+
+    /**
+     * 将一个小数精确到指定位数
+     * @param num
+     * @param scale
+     * @return
+     */
+    public static double scale(double num, int scale) {
+        BigDecimal bd = new BigDecimal(num);
+        return bd.setScale(scale, RoundingMode.HALF_UP).doubleValue();
+    }
+
+    // 从字符串中根据正则表达式寻找，返回找到的数字数组
+    public static Double[] searchNumber(String value, String regex){
+        List<Double> doubles = new ArrayList<>();
+        Pattern pattern = Pattern.compile(regex);
+        Matcher matcher = pattern.matcher(value);
+        if(matcher.find()) {
+            MatchResult result = matcher.toMatchResult();
+            for (int i = 1; i <= result.groupCount(); i++) {
+                doubles.add(Double.valueOf(result.group(i)));
+            }
+        }
+        return doubles.toArray(new Double[doubles.size()]);
+    }
+
+    /**
+     * 生成指定位数的随机数字
+     * @param len
+     * @return
+     */
+    public static String generateCode(int len){
+        len = Math.min(len, 8);
+        int min = Double.valueOf(Math.pow(10, len - 1)).intValue();
+        int num = new Random().nextInt(Double.valueOf(Math.pow(10, len + 1)).intValue() - 1) + min;
+        return String.valueOf(num).substring(0,len);
+    }
+}
Index: ly-item/ly-item-service/src/main/java/com/leyou/LyItemApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/LyItemApplication.java	(date 1571758825986)
+++ ly-item/ly-item-service/src/main/java/com/leyou/LyItemApplication.java	(date 1571758825986)
@@ -0,0 +1,14 @@
+package com.leyou;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+
+
+@SpringBootApplication
+@EnableDiscoveryClient
+public class LyItemApplication {
+    public static void main(String[] args) {
+        SpringApplication.run(LyItemApplication.class);
+    }
+}
Index: leyou.iml
===================================================================
--- leyou.iml	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ ly.iml	(date 1571676433333)
Index: ly-item/ly-item-service/src/main/java/com/leyou/vo/BaseRep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/vo/BaseRep.java	(date 1575284805308)
+++ ly-item/ly-item-service/src/main/java/com/leyou/vo/BaseRep.java	(date 1575284805308)
@@ -0,0 +1,9 @@
+package com.leyou.vo;
+
+import lombok.Data;
+
+@Data
+public class BaseRep {
+    public String code;
+    public String message;
+}
Index: ly-gateway/src/main/java/com/leyou/gateway/LyGateway.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-gateway/src/main/java/com/leyou/gateway/LyGateway.java	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ ly-gateway/src/main/java/com/leyou/gateway/LyGateway.java	(date 1571758606466)
@@ -2,10 +2,12 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
 import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
 
 @SpringBootApplication
 @EnableZuulProxy
+@EnableEurekaClient
 public class LyGateway {
     public static void main(String[] args) {
         SpringApplication.run(LyGateway.class);
Index: ly-item/ly-item-service/src/main/java/com/leyou/domain/Namespace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/domain/Namespace.java	(date 1575284585269)
+++ ly-item/ly-item-service/src/main/java/com/leyou/domain/Namespace.java	(date 1575284585269)
@@ -0,0 +1,36 @@
+package com.leyou.domain;
+
+
+import lombok.Getter;
+import lombok.Setter;
+import org.springframework.data.mongodb.core.mapping.Document;
+import org.springframework.data.mongodb.core.mapping.Field;
+
+import java.io.Serializable;
+
+/**
+ * @Document用于指定数据库的conllection
+ *
+ * @field用于指定数据库字段
+ *
+ * @id用于标识主键
+ *
+ * @GeneratedValue 自动生成id
+ */
+@Getter
+@Setter
+@Document(collection = "tes_namespace")
+public class Namespace implements Serializable {
+
+    private static final long serialVersionUID = 4531499444309419351L;
+
+    @Field("name")
+    private String name;
+
+    @Field("code")
+    private String code;
+
+    @Field("description")
+    private String description;
+}
+
Index: ly-gateway/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-gateway/src/main/resources/application.yml	(revision 83d11382455a708dde4898f30f33842cbc347c08)
+++ ly-gateway/src/main/resources/application.yml	(date 1571760261862)
@@ -3,12 +3,14 @@
 spring:
   application:
     name: ly-gateway
-eureke:
+eureka:
   client:
     service-url:
       defaultZone: http://127.0.0.1:10086/eureka
 zuul:
   prefix: /api #添加路由前缀
+  routes:
+    item-service: /item/**
 hystrix:
   command:
     default:
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryBrandMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryBrandMapper.java	(date 1575720882614)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryBrandMapper.java	(date 1575720882614)
@@ -0,0 +1,24 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbCategoryBrandExample;
+import com.leyou.po.TbCategoryBrandKey;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbCategoryBrandMapper {
+    long countByExample(TbCategoryBrandExample example);
+
+    int deleteByExample(TbCategoryBrandExample example);
+
+    int deleteByPrimaryKey(TbCategoryBrandKey key);
+
+    int insert(TbCategoryBrandKey record);
+
+    int insertSelective(TbCategoryBrandKey record);
+
+    List<TbCategoryBrandKey> selectByExample(TbCategoryBrandExample example);
+
+    int updateByExampleSelective(@Param("record") TbCategoryBrandKey record, @Param("example") TbCategoryBrandExample example);
+
+    int updateByExample(@Param("record") TbCategoryBrandKey record, @Param("example") TbCategoryBrandExample example);
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCouponMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCouponMapper.java	(date 1575720882617)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCouponMapper.java	(date 1575720882617)
@@ -0,0 +1,30 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbCoupon;
+import com.leyou.po.TbCouponExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbCouponMapper {
+    long countByExample(TbCouponExample example);
+
+    int deleteByExample(TbCouponExample example);
+
+    int deleteByPrimaryKey(Long id);
+
+    int insert(TbCoupon record);
+
+    int insertSelective(TbCoupon record);
+
+    List<TbCoupon> selectByExample(TbCouponExample example);
+
+    TbCoupon selectByPrimaryKey(Long id);
+
+    int updateByExampleSelective(@Param("record") TbCoupon record, @Param("example") TbCouponExample example);
+
+    int updateByExample(@Param("record") TbCoupon record, @Param("example") TbCouponExample example);
+
+    int updateByPrimaryKeySelective(TbCoupon record);
+
+    int updateByPrimaryKey(TbCoupon record);
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbBrandMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbBrandMapper.java	(date 1575720882607)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbBrandMapper.java	(date 1575720882607)
@@ -0,0 +1,30 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbBrand;
+import com.leyou.po.TbBrandExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbBrandMapper {
+    long countByExample(TbBrandExample example);
+
+    int deleteByExample(TbBrandExample example);
+
+    int deleteByPrimaryKey(Long id);
+
+    int insert(TbBrand record);
+
+    int insertSelective(TbBrand record);
+
+    List<TbBrand> selectByExample(TbBrandExample example);
+
+    TbBrand selectByPrimaryKey(Long id);
+
+    int updateByExampleSelective(@Param("record") TbBrand record, @Param("example") TbBrandExample example);
+
+    int updateByExample(@Param("record") TbBrand record, @Param("example") TbBrandExample example);
+
+    int updateByPrimaryKeySelective(TbBrand record);
+
+    int updateByPrimaryKey(TbBrand record);
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderMapper.java	(date 1575720882621)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderMapper.java	(date 1575720882621)
@@ -0,0 +1,30 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbOrder;
+import com.leyou.po.TbOrderExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbOrderMapper {
+    long countByExample(TbOrderExample example);
+
+    int deleteByExample(TbOrderExample example);
+
+    int deleteByPrimaryKey(Long orderId);
+
+    int insert(TbOrder record);
+
+    int insertSelective(TbOrder record);
+
+    List<TbOrder> selectByExample(TbOrderExample example);
+
+    TbOrder selectByPrimaryKey(Long orderId);
+
+    int updateByExampleSelective(@Param("record") TbOrder record, @Param("example") TbOrderExample example);
+
+    int updateByExample(@Param("record") TbOrder record, @Param("example") TbOrderExample example);
+
+    int updateByPrimaryKeySelective(TbOrder record);
+
+    int updateByPrimaryKey(TbOrder record);
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderDetailMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderDetailMapper.java	(date 1575720882624)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbOrderDetailMapper.java	(date 1575720882624)
@@ -0,0 +1,30 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbOrderDetail;
+import com.leyou.po.TbOrderDetailExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbOrderDetailMapper {
+    long countByExample(TbOrderDetailExample example);
+
+    int deleteByExample(TbOrderDetailExample example);
+
+    int deleteByPrimaryKey(Long id);
+
+    int insert(TbOrderDetail record);
+
+    int insertSelective(TbOrderDetail record);
+
+    List<TbOrderDetail> selectByExample(TbOrderDetailExample example);
+
+    TbOrderDetail selectByPrimaryKey(Long id);
+
+    int updateByExampleSelective(@Param("record") TbOrderDetail record, @Param("example") TbOrderDetailExample example);
+
+    int updateByExample(@Param("record") TbOrderDetail record, @Param("example") TbOrderDetailExample example);
+
+    int updateByPrimaryKeySelective(TbOrderDetail record);
+
+    int updateByPrimaryKey(TbOrderDetail record);
+}
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryMapper.java	(date 1575720882610)
+++ ly-item/ly-item-service/src/main/java/com/leyou/mapper/TbCategoryMapper.java	(date 1575720882610)
@@ -0,0 +1,30 @@
+package com.leyou.mapper;
+
+import com.leyou.po.TbCategory;
+import com.leyou.po.TbCategoryExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface TbCategoryMapper {
+    long countByExample(TbCategoryExample example);
+
+    int deleteByExample(TbCategoryExample example);
+
+    int deleteByPrimaryKey(Long id);
+
+    int insert(TbCategory record);
+
+    int insertSelective(TbCategory record);
+
+    List<TbCategory> selectByExample(TbCategoryExample example);
+
+    TbCategory selectByPrimaryKey(Long id);
+
+    int updateByExampleSelective(@Param("record") TbCategory record, @Param("example") TbCategoryExample example);
+
+    int updateByExample(@Param("record") TbCategory record, @Param("example") TbCategoryExample example);
+
+    int updateByPrimaryKeySelective(TbCategory record);
+
+    int updateByPrimaryKey(TbCategory record);
+}
\ No newline at end of file
Index: ly-item/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/pom.xml	(date 1571753304451)
+++ ly-item/pom.xml	(date 1571753304451)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>leyou</artifactId>
+        <groupId>com.leyou.parent</groupId>
+        <version>1.0.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.leyou.service</groupId>
+    <artifactId>ly-item</artifactId>
+    <packaging>pom</packaging>
+    <modules>
+        <module>ly-item-interface</module>
+        <module>ly-item-service</module>
+    </modules>
+
+
+</project>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/mapper/TbBrandMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbBrandMapper.xml	(date 1575720882596)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbBrandMapper.xml	(date 1575720882596)
@@ -0,0 +1,196 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbBrandMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbBrand">
+    <id column="id" jdbcType="BIGINT" property="id" />
+    <result column="name" jdbcType="VARCHAR" property="name" />
+    <result column="image" jdbcType="VARCHAR" property="image" />
+    <result column="letter" jdbcType="CHAR" property="letter" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, name, image, letter
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbBrandExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from tb_brand
+    where id = #{id,jdbcType=BIGINT}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
+    delete from tb_brand
+    where id = #{id,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbBrandExample">
+    delete from tb_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbBrand">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_brand (name, image, letter
+      )
+    values (#{name,jdbcType=VARCHAR}, #{image,jdbcType=VARCHAR}, #{letter,jdbcType=CHAR}
+      )
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbBrand">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_brand
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        name,
+      </if>
+      <if test="image != null">
+        image,
+      </if>
+      <if test="letter != null">
+        letter,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="image != null">
+        #{image,jdbcType=VARCHAR},
+      </if>
+      <if test="letter != null">
+        #{letter,jdbcType=CHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbBrandExample" resultType="java.lang.Long">
+    select count(*) from tb_brand
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_brand
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=BIGINT},
+      </if>
+      <if test="record.name != null">
+        name = #{record.name,jdbcType=VARCHAR},
+      </if>
+      <if test="record.image != null">
+        image = #{record.image,jdbcType=VARCHAR},
+      </if>
+      <if test="record.letter != null">
+        letter = #{record.letter,jdbcType=CHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_brand
+    set id = #{record.id,jdbcType=BIGINT},
+      name = #{record.name,jdbcType=VARCHAR},
+      image = #{record.image,jdbcType=VARCHAR},
+      letter = #{record.letter,jdbcType=CHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.leyou.po.TbBrand">
+    update tb_brand
+    <set>
+      <if test="name != null">
+        name = #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="image != null">
+        image = #{image,jdbcType=VARCHAR},
+      </if>
+      <if test="letter != null">
+        letter = #{letter,jdbcType=CHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.leyou.po.TbBrand">
+    update tb_brand
+    set name = #{name,jdbcType=VARCHAR},
+      image = #{image,jdbcType=VARCHAR},
+      letter = #{letter,jdbcType=CHAR}
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+</mapper>
\ No newline at end of file
Index: ly-item/ly-item-service/src/main/resources/mapper/TbCategoryMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-service/src/main/resources/mapper/TbCategoryMapper.xml	(date 1575720882597)
+++ ly-item/ly-item-service/src/main/resources/mapper/TbCategoryMapper.xml	(date 1575720882597)
@@ -0,0 +1,211 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.leyou.mapper.TbCategoryMapper">
+  <resultMap id="BaseResultMap" type="com.leyou.po.TbCategory">
+    <id column="id" jdbcType="BIGINT" property="id" />
+    <result column="name" jdbcType="VARCHAR" property="name" />
+    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
+    <result column="is_parent" jdbcType="BIT" property="isParent" />
+    <result column="sort" jdbcType="INTEGER" property="sort" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, name, parent_id, is_parent, sort
+  </sql>
+  <select id="selectByExample" parameterType="com.leyou.po.TbCategoryExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from tb_category
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from tb_category
+    where id = #{id,jdbcType=BIGINT}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
+    delete from tb_category
+    where id = #{id,jdbcType=BIGINT}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.leyou.po.TbCategoryExample">
+    delete from tb_category
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.leyou.po.TbCategory">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_category (name, parent_id, is_parent, 
+      sort)
+    values (#{name,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT}, #{isParent,jdbcType=BIT}, 
+      #{sort,jdbcType=INTEGER})
+  </insert>
+  <insert id="insertSelective" parameterType="com.leyou.po.TbCategory">
+    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
+      SELECT LAST_INSERT_ID()
+    </selectKey>
+    insert into tb_category
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        name,
+      </if>
+      <if test="parentId != null">
+        parent_id,
+      </if>
+      <if test="isParent != null">
+        is_parent,
+      </if>
+      <if test="sort != null">
+        sort,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="name != null">
+        #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="parentId != null">
+        #{parentId,jdbcType=BIGINT},
+      </if>
+      <if test="isParent != null">
+        #{isParent,jdbcType=BIT},
+      </if>
+      <if test="sort != null">
+        #{sort,jdbcType=INTEGER},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.leyou.po.TbCategoryExample" resultType="java.lang.Long">
+    select count(*) from tb_category
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update tb_category
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=BIGINT},
+      </if>
+      <if test="record.name != null">
+        name = #{record.name,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentId != null">
+        parent_id = #{record.parentId,jdbcType=BIGINT},
+      </if>
+      <if test="record.isParent != null">
+        is_parent = #{record.isParent,jdbcType=BIT},
+      </if>
+      <if test="record.sort != null">
+        sort = #{record.sort,jdbcType=INTEGER},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update tb_category
+    set id = #{record.id,jdbcType=BIGINT},
+      name = #{record.name,jdbcType=VARCHAR},
+      parent_id = #{record.parentId,jdbcType=BIGINT},
+      is_parent = #{record.isParent,jdbcType=BIT},
+      sort = #{record.sort,jdbcType=INTEGER}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.leyou.po.TbCategory">
+    update tb_category
+    <set>
+      <if test="name != null">
+        name = #{name,jdbcType=VARCHAR},
+      </if>
+      <if test="parentId != null">
+        parent_id = #{parentId,jdbcType=BIGINT},
+      </if>
+      <if test="isParent != null">
+        is_parent = #{isParent,jdbcType=BIT},
+      </if>
+      <if test="sort != null">
+        sort = #{sort,jdbcType=INTEGER},
+      </if>
+    </set>
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.leyou.po.TbCategory">
+    update tb_category
+    set name = #{name,jdbcType=VARCHAR},
+      parent_id = #{parentId,jdbcType=BIGINT},
+      is_parent = #{isParent,jdbcType=BIT},
+      sort = #{sort,jdbcType=INTEGER}
+    where id = #{id,jdbcType=BIGINT}
+  </update>
+</mapper>
\ No newline at end of file
Index: ly-item/ly-item-interface/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ly-item/ly-item-interface/pom.xml	(date 1571753261742)
+++ ly-item/ly-item-interface/pom.xml	(date 1571753261742)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>ly-item</artifactId>
+        <groupId>com.leyou.service</groupId>
+        <version>1.0.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.leyou.service</groupId>
+    <artifactId>ly-item-interface</artifactId>
+
+
+</project>
\ No newline at end of file
